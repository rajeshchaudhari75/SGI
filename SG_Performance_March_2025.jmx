<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Environment Variables - HAL (URL)">
        <collectionProp name="Arguments.arguments">
          <elementProp name="p_protocol" elementType="Argument">
            <stringProp name="Argument.name">p_protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="p_baseUpamUrl" elementType="Argument">
            <stringProp name="Argument.name">p_baseUpamUrl</stringProp>
            <stringProp name="Argument.value">re-api-gateway-t2.scigames.nz</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="p_baseSGCHUrl" elementType="Argument">
            <stringProp name="Argument.name">p_baseSGCHUrl</stringProp>
            <stringProp name="Argument.value">apacch-uat.sgch.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="p_baseRCSUrl" elementType="Argument">
            <stringProp name="Argument.name">p_baseRCSUrl</stringProp>
            <stringProp name="Argument.value">lnz-t2-rcs.scigames.nz</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="p_baseDGEUrl" elementType="Argument">
            <stringProp name="Argument.name">p_baseDGEUrl</stringProp>
            <stringProp name="Argument.value">lnz-t2-dge.scigames.nz</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="p_basePDSUrl" elementType="Argument">
            <stringProp name="Argument.name">p_basePDSUrl</stringProp>
            <stringProp name="Argument.value">lnz-t2-pds.scigames.nz</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="p_baseIGEUrl" elementType="Argument">
            <stringProp name="Argument.name">p_baseIGEUrl</stringProp>
            <stringProp name="Argument.value">lnz-t2-ige.scigames.nz</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="p_operatorId" elementType="Argument">
            <stringProp name="Argument.name">p_operatorId</stringProp>
            <stringProp name="Argument.value">LNZ</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="p_baseUpamPort" elementType="Argument">
            <stringProp name="Argument.name">p_baseUpamPort</stringProp>
            <stringProp name="Argument.value">443</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_1" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_1</stringProp>
            <stringProp name="Argument.value">payment-provider-proxy-t2.scigames.nz</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_2" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_2</stringProp>
            <stringProp name="Argument.value">uat.windcave.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="p_clientSecret" elementType="Argument">
            <stringProp name="Argument.name">p_clientSecret</stringProp>
            <stringProp name="Argument.value">MstkMYfDBsZ9kEGxqjBNxGqVtAQUx7KR</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="p_clientId" elementType="Argument">
            <stringProp name="Argument.name">p_clientId</stringProp>
            <stringProp name="Argument.value">frontend</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="p_password" elementType="Argument">
            <stringProp name="Argument.name">p_password</stringProp>
            <stringProp name="Argument.value">passperf</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="p_channel" elementType="Argument">
            <stringProp name="Argument.name">p_channel</stringProp>
            <stringProp name="Argument.value">web</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="p_lastName" elementType="Argument">
            <stringProp name="Argument.name">p_lastName</stringProp>
            <stringProp name="Argument.value">User</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="p_ip" elementType="Argument">
            <stringProp name="Argument.name">p_ip</stringProp>
            <stringProp name="Argument.value">127.0.0.1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="p_adminToken" elementType="Argument">
            <stringProp name="Argument.name">p_adminToken</stringProp>
            <stringProp name="Argument.value">7f9a6dad-1ae0-44ba-a4f3-85efe6e30c2b</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="p_adjustmentAmount" elementType="Argument">
            <stringProp name="Argument.name">p_adjustmentAmount</stringProp>
            <stringProp name="Argument.value">500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="p_orgName" elementType="Argument">
            <stringProp name="Argument.name">p_orgName</stringProp>
            <stringProp name="Argument.value">sgi_org</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="p_bucketName" elementType="Argument">
            <stringProp name="Argument.name">p_bucketName</stringProp>
            <stringProp name="Argument.value">sgi_perf</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="p_appName" elementType="Argument">
            <stringProp name="Argument.name">p_appName</stringProp>
            <stringProp name="Argument.value">Lotto</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="p_testTitle" elementType="Argument">
            <stringProp name="Argument.name">p_testTitle</stringProp>
            <stringProp name="Argument.value">Smoke</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="p_influxdbToken" elementType="Argument">
            <stringProp name="Argument.name">p_influxdbToken</stringProp>
            <stringProp name="Argument.value">VdXCsHZZBCDPhqmD7lRlejuJz2e1sKLQgrsVlJmDCr0hXEQa1WZuySqfptslnWIhC5kb3FVjSethrpVIcMkDxA==</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="p_strikeGameId" elementType="Argument">
            <stringProp name="Argument.name">p_strikeGameId</stringProp>
            <stringProp name="Argument.value">12</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="p_lottoPowerballGameId" elementType="Argument">
            <stringProp name="Argument.name">p_lottoPowerballGameId</stringProp>
            <stringProp name="Argument.value">20</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="p_kenoGameId" elementType="Argument">
            <stringProp name="Argument.name">p_kenoGameId</stringProp>
            <stringProp name="Argument.value">22</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="p_bullseyeGameId" elementType="Argument">
            <stringProp name="Argument.name">p_bullseyeGameId</stringProp>
            <stringProp name="Argument.value">25</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="randomDelay" elementType="Argument">
            <stringProp name="Argument.name">randomDelay</stringProp>
            <stringProp name="Argument.value">100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="constantDelay" elementType="Argument">
            <stringProp name="Argument.name">constantDelay</stringProp>
            <stringProp name="Argument.value">3000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="extraDelay" elementType="Argument">
            <stringProp name="Argument.name">extraDelay</stringProp>
            <stringProp name="Argument.value">3000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="p_resultsFileName1" elementType="Argument">
            <stringProp name="Argument.name">p_resultsFileName1</stringProp>
            <stringProp name="Argument.value">CombinedExceptDeposits_RampUp_3600TPM_03162025_1350</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="p_resultsFileName" elementType="Argument">
            <stringProp name="Argument.name">p_resultsFileName</stringProp>
            <stringProp name="Argument.value">OnlyWagers_RampUp_3600TPM_${__time(MMddyyyy_HHmm,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Test Data: Retailer Details" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="filename">C:/SGI_Performance/sg_perf_test/data/retailer_details.csv</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.group</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">p_posId,p_socketId</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Test Data: Player Details" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="filename">C:/SGI_Performance/sg_perf_test/data/player_details_login.csv</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.group</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">p_playerLogin,c_playerId</stringProp>
      </CSVDataSet>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="Accept-Encoding" elementType="Header">
            <stringProp name="Header.name">Accept-Encoding</stringProp>
            <stringProp name="Header.value">gzip,deflate,br</stringProp>
          </elementProp>
          <elementProp name="Connection" elementType="Header">
            <stringProp name="Header.name">Connection</stringProp>
            <stringProp name="Header.value">keep-alive</stringProp>
          </elementProp>
          <elementProp name="Accept-Language" elementType="Header">
            <stringProp name="Header.name">Accept-Language</stringProp>
            <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">X-SG-SS-Operator-Id</stringProp>
            <stringProp name="Header.value">${p_operatorId}</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">X-SG-SS-Correlation-Id</stringProp>
            <stringProp name="Header.value">${p_guid}</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">*/*</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <stringProp name="HTTPSampler.domain">${p_baseUpamUrl}</stringProp>
        <stringProp name="HTTPSampler.port">${p_baseUpamPort}</stringProp>
        <stringProp name="HTTPSampler.protocol">${p_protocol}</stringProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.implementation"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp" enabled="true">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </SetupThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="DeleteResultsFile" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">
// Specify the path of the file you want to delete
def filePath1 = &quot;C://SGI_Performance//sg_perf_test//data//result_player_details_login.csv&quot;
def file1 = new File(filePath1)
if (file1.exists()) {
    if (file1.delete()) {
        println &quot;File deleted successfully: ${filePath1}&quot;
    } else {
        println &quot;Failed to delete the file: ${filePath1}&quot;
    }
} else {
    println &quot;File not found: ${filePath1}&quot;
}

def filePath2 = &quot;C://SGI_Performance//sg_perf_test//data//result_player_details_others.csv&quot;
def file2 = new File(filePath2)
if (file2.exists()) {
    if (file2.delete()) {
        println &quot;File deleted successfully: ${filePath2}&quot;
    } else {
        println &quot;Failed to delete the file: ${filePath2}&quot;
    }
} else {
    println &quot;File not found: ${filePath2}&quot;
}

def filePath3 = &quot;C://SGI_Performance//sg_perf_test//data//result_player_details_wagers.csv&quot;
def file3 = new File(filePath3)
if (file3.exists()) {
    if (file3.delete()) {
        println &quot;File deleted successfully: ${filePath3}&quot;
    } else {
        println &quot;Failed to delete the file: ${filePath3}&quot;
    }
} else {
    println &quot;File not found: ${filePath3}&quot;
}

def filePath4 = &quot;C://SGI_Performance//sg_perf_test//data//result_player_details_deposits.csv&quot;
def file4 = new File(filePath4)
if (file4.exists()) {
    if (file4.delete()) {
        println &quot;File deleted successfully: ${filePath4}&quot;
    } else {
        println &quot;Failed to delete the file: ${filePath4}&quot;
    }
} else {
    println &quot;File not found: ${filePath4}&quot;
}

// Set a global property in the Test Plan
//props.put(&quot;p_dateTime&quot;, new java.text.SimpleDateFormat(&quot;MMddyyyy_HHmm&quot;).format(new Date()))

// Access the global property anywhere in the test plan
//def p_dateTime = props.get(&quot;p_dateTime&quot;)


// Log the value for debugging
//log.info(&quot;Global DateTime: ${p_dateTime}&quot;)

</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="API_Validations" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">2</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Test Data: Player Details (Login)" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">C:/SGI_Performance/sg_perf_test/data/player_details_login.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">p_playerLogin</stringProp>
        </CSVDataSet>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Request Index Header" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">vars.put(&quot;p_guid&quot;, UUID.randomUUID().toString());
vars.put(&quot;p_gameId&quot;, &quot;20&quot;);
//vars.put(&quot;p_gameId&quot;, (new String[]{&quot;12&quot;, &quot;20&quot;, &quot;22&quot;, &quot;25&quot;})[(int)(Math.random() * 4)]);
//log.info(&quot;Generated requestIndex for Session is: &quot; + vars.get(&quot;p_guid&quot;));
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login: POST /pfi/login - UPAM" enabled="true">
          <stringProp name="HTTPSampler.path">/pfi/login</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">player</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">type</stringProp>
              </elementProp>
              <elementProp name="email" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${p_playerLogin}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">email</stringProp>
              </elementProp>
              <elementProp name="password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${p_password}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">password</stringProp>
              </elementProp>
              <elementProp name="clientSecret" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${p_clientSecret}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">clientSecret</stringProp>
              </elementProp>
              <elementProp name="clientId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${p_clientId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">clientId</stringProp>
              </elementProp>
              <elementProp name="channel" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${p_channel}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">channel</stringProp>
              </elementProp>
              <elementProp name="ip" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${p_ip}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">ip</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
vars.put(&quot;c_playerBearerToken&quot;, response.data.id.toString());
vars.put(&quot;c_playerId&quot;, response.data.attributes.playerId.toString());
vars.put(&quot;c_playerRefreshToken&quot;, response.data.attributes.refreshToken.toString());

//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; PLAYER_ID: &quot; + vars.get(&quot;c_playerId&quot;) + &quot; PLAYER_BEARER_TOKEN: &quot; + vars.get(&quot;c_playerBearerToken&quot;) + &quot; PLAYER_REFRESH_TOEKN: &quot; + vars.get(&quot;c_playerRefreshToken&quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchWalletBalance: GET /pfi/wallets/{playerId} - UPAM" enabled="true">
          <stringProp name="HTTPSampler.path">/pfi/wallets/${c_playerId}</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

//vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
vars.put(&quot;c_walletType&quot;, response.data.attributes.balances[2].id.toString());
vars.put(&quot;c_walletBalance&quot;, response.data.attributes.balances[2].available.toString());

//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; WALLET_TYPE: &quot; + vars.get(&quot;c_walletType&quot;) + &quot; WALLET_BALANCE: &quot; + vars.get(&quot;c_walletBalance&quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchWinningsToProcess: GET /pfi/players/{playerId}/winnings-to-process - UPAM" enabled="true">
          <stringProp name="HTTPSampler.path">/pfi/players/${c_playerId}/winnings-to-process</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="c_winningId" enabled="false">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">c_winningId</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">&quot;id&quot;:&quot;</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">&quot;,</stringProp>
            <stringProp name="BoundaryExtractor.default"></stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number"></stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="c_winningId" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">c_winningId</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">&quot;winningId&quot;:&quot;</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">&quot;,&quot;</stringProp>
            <stringProp name="BoundaryExtractor.default"></stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number"></stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

def winningsId = response.data.findAll { it.attributes.status == &quot;pending-player-ack&quot; &amp;&amp; it.attributes.acknowledged == false }*.id


// Select the 2nd ID (index 1 since Groovy lists are 0-based)
vars.put(&quot;c_winningsId&quot;, winningsId.size() &gt; 0 ? winningsId[0] : null);
</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchWinningsToProcess(ID): GET /pfi/players/{playerId}/winnings-to-process/{winningId} - UPAM" enabled="true">
          <stringProp name="HTTPSampler.path">/pfi/players/${c_playerId}/winnings-to-process/${c_winningId}</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;acknowledged&quot;: true&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchPlayerProfile: GET /pfi/profile/players/{playerId}/details - UPAM" enabled="true">
          <stringProp name="HTTPSampler.path">/pfi/profile/players/${c_playerId}/details</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request Check" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

vars.put(&quot;c_tcIp&quot;, response.data.attributes.termsAndConditions[0].ip.toString());
vars.put(&quot;c_tcOriginalVersion&quot;, response.data.attributes.termsAndConditions[0].revision.toString());

//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${playerLogin}&quot; + &quot; PLAYER_ID: &quot; + vars.get(&quot;playerId&quot;) + &quot; LOCATION_ID: &quot; + vars.get(&quot;location&quot;) + &quot; TOKEN: &quot; + vars.get(&quot;authorization_token&quot;));
//log.info(&quot; TC_TYPE: &quot; + vars.get(&quot;c_tcIp&quot;));
//log.info(&quot; TC_ORIGINAL_VERSION: &quot; + vars.get(&quot;c_tcOriginalVersion&quot;));

</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchPaymentMethods: GET /pfi/players/{playerId}/payment-methods - UPAM" enabled="true">
          <stringProp name="HTTPSampler.path">/pfi/players/${c_playerId}/payment-methods</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

// Collect IDs for objects with type &quot;creditCard&quot;
def creditCardIds = response.data.findAll { it.attributes.type == &quot;creditCard&quot; &amp;&amp; it.attributes.isValid == true }*.id

// Select the 2nd ID (index 1 since Groovy lists are 0-based)
vars.put(&quot;c_paymentMethodId&quot;, creditCardIds.size() &gt; 0 ? creditCardIds[0] : null);

//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; PAYMENT METHOD ID: &quot; + vars.get(&quot;c_paymentMethodId&quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deposits: POST /pfi/players/{playerId}/deposits - UPAM" enabled="true">
          <stringProp name="HTTPSampler.path">/pfi/players/${c_playerId}/deposits</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;deposit&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;amount&quot;: ${p_adjustmentAmount},&#xd;
      &quot;currency&quot;: &quot;NZD&quot;,&#xd;
      &quot;paymentMethodId&quot;: &quot;${c_paymentMethodId}&quot;,&#xd;
      &quot;ledger&quot;: &quot;real-money&quot;,&#xd;
      &quot;channel&quot;: &quot;DESKTOP&quot;,&#xd;
      &quot;capture&quot;: true,&#xd;
      &quot;acceptRedirectUrl&quot;: &quot;http://frontend/accept&quot;,&#xd;
      &quot;cancelRedirectUrl&quot;: &quot;http://frontend/cancel&quot;,&#xd;
      &quot;3dsecure&quot;: true&#xd;
    }&#xd;
  }&#xd;
}&#xd;
 </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

//vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
vars.put(&quot;c_transactionId&quot;, response.data.id.toString());

//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; TOP UP ID: &quot; + vars.get(&quot;c_topUpId&quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="sessionId2" enabled="false">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">c_sessionId2</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">&quot;id&quot;:&quot;</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">&quot;,</stringProp>
            <stringProp name="BoundaryExtractor.default"></stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="redirectURL2" enabled="false">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">c_redirectURL2</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">&quot;urlToRedirect&quot;:&quot;</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">&quot;</stringProp>
            <stringProp name="BoundaryExtractor.default"></stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchBlockedGames: GET /pfi/exclusions/players/{playerId}/ - UPAM" enabled="true">
          <stringProp name="HTTPSampler.path">/pfi/exclusions/players/${c_playerId}/</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchSpendLimits: GET /limits/players/{playerId} - UPAM" enabled="true">
          <stringProp name="HTTPSampler.path">/pfi/limits/players/${c_playerId}</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="filter%5Bstatus%5D" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">active%2Cplanned</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">filter%5Bstatus%5D</stringProp>
              </elementProp>
              <elementProp name="expand" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">counters</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">expand</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchCurrentDraw: GET /draw-history-api/v1/games/{gameId}/draws/next - PDS" enabled="true">
          <stringProp name="HTTPSampler.domain">${p_basePDSUrl}</stringProp>
          <stringProp name="HTTPSampler.path">/draw-history-api/v1/games/${p_gameId}/draws/next?by=SELL_END_DATE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="c_drawNumber" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">c_drawNumber</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">&quot;drawNo&quot;:</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">,&quot;</stringProp>
            <stringProp name="BoundaryExtractor.default"></stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number"></stringProp>
          </BoundaryExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchCurrentDraw: GET /draw-history-api/v1/games/{gameId}/draws/{drawNumber} - PDS" enabled="true">
          <stringProp name="HTTPSampler.domain">${p_basePDSUrl}</stringProp>
          <stringProp name="HTTPSampler.path">/draw-history-api/v1/games/${p_gameId}/draws/${c_drawNumber}</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchGameHistory: GET /pfi/players/{playerId}/game-history - UPAM" enabled="true">
          <stringProp name="HTTPSampler.path">/pfi/players/${c_playerId}/game-history</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="filter%5Bfrom%5D" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">2024-12-28</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">filter%5Bfrom%5D</stringProp>
              </elementProp>
              <elementProp name="filter%5Bto%5D" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">2025-03-31</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">filter%5Bto%5D</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

//vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
vars.put(&quot;c_wagerId&quot;, response.data[0].parentExternalId.toString());


//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; WAGER ID: &quot; + vars.get(&quot;c_wagerId&quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="c_wagerId" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">c_wagerId</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">&quot;parentExternalId&quot;:&quot;</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">&quot;,</stringProp>
            <stringProp name="BoundaryExtractor.default"></stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number"></stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="c_gameHistoryId" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">c_gameHistoryId</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">&quot;id&quot;:&quot;</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">&quot;,&quot;</stringProp>
            <stringProp name="BoundaryExtractor.default"></stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">0</stringProp>
          </BoundaryExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchFavourites: GET /pfi/profile/players/{playerId}/favorite-bets - UPAM" enabled="true">
          <stringProp name="HTTPSampler.path">/pfi/profile/players/${c_playerId}/favorite-bets</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchWagerHistory: POST /wager-history-api/v1/wagers/get-many - PDS" enabled="true">
          <stringProp name="HTTPSampler.domain">${p_basePDSUrl}</stringProp>
          <stringProp name="HTTPSampler.path">/wager-history-api/v1/wagers/get-many</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[&#xd;
  &quot;${c_wagerId}&quot;&#xd;
]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer;

String path=FileServer.getFileServer().getBaseDir();

f = new FileOutputStream(&quot;C://SGI_Performance//sg_perf_test//data//result_player_details_login.csv&quot;,true);
p = new PrintStream(f); 

iteration = vars.getIteration();
p_playerLogin = vars.get(&quot;p_playerLogin&quot;);
c_playerId = vars.get(&quot;c_playerId&quot;);
c_walletBalance = vars.get(&quot;c_walletBalance&quot;);
threadnum = ${__threadNum};
datetime = &quot;${__time(yyyy_MM_dd_HH_mm_ss)}&quot;;

this.interpreter.setOut(p); 
//p.println(p_playerLogin+ &quot;,&quot; +c_walletType+ &quot;,&quot; +c_walletBalance+ &quot;,&quot;+threadnum+ &quot;,&quot; +iteration);
p.println(&quot;Player Login: &quot; +p_playerLogin+ &quot;, Player ID: &quot; +c_playerId+ &quot;, Wallet Balance: &quot; +c_walletBalance+ &quot;, Thread Number: &quot;+threadnum+ &quot;, Iteration Number: &quot; +iteration+&quot;, Time: &quot;+datetime);

f.close();
//log.info(&quot;LOGIN FAILED, PLAYER: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + ${__threadNum}+ &quot;, Iteration: &quot; +iteration);
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RegisterWager(LottoPB): POST /rcs-dge-wager/v1/wagers - DGE" enabled="true">
          <stringProp name="HTTPSampler.domain">${p_baseRCSUrl}</stringProp>
          <stringProp name="HTTPSampler.path">/rcs-dge-wager/v1/wagers</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;playerData&quot;: {&#xd;
    &quot;playerId&quot;: &quot;${c_playerId}&quot;&#xd;
  },&#xd;
  &quot;wagerRequestData&quot;: {&#xd;
    &quot;playMethodNo&quot;: 2,&#xd;
    &quot;wagerTypeNo&quot;: 14,&#xd;
    &quot;wagerDefNo&quot;: 21,&#xd;
    &quot;betDataReq&quot;: [&#xd;
      {&#xd;
        &quot;gameId&quot;: 20,&#xd;
        &quot;drawCount&quot;: 1,&#xd;
        &quot;drawDayNo&quot;: 8,&#xd;
        &quot;panels&quot;: [&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          }&#xd;
        ]&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-correlation-id</stringProp>
                <stringProp name="Header.value">${p_guid}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-device-type</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-device-user-id</stringProp>
                <stringProp name="Header.value">10076</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-jurisdiction-id</stringProp>
                <stringProp name="Header.value">54</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-pos-id</stringProp>
                <stringProp name="Header.value">525802</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-sales-channel</stringProp>
                <stringProp name="Header.value">10</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-pos-device-socket-id</stringProp>
                <stringProp name="Header.value">52580200</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

//vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
//vars.put(&quot;c_wagerPrice&quot;, response.wagerResponseData[0].wagerPrice.toString());
vars.put(&quot;c_wagerId&quot;, response.wagerResponseData[0].wagerId.toString());


//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; WAGER (DIP: Triple) PRICE: &quot; + vars.get(&quot;c_wagerPrice&quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer;

String path=FileServer.getFileServer().getBaseDir();

f = new FileOutputStream(&quot;C://SGI_Performance//sg_perf_test//data//result_player_details_wagers.csv&quot;,true);
p = new PrintStream(f); 

iteration = vars.getIteration();
c_playerId = vars.get(&quot;c_playerId&quot;);
p_posId = vars.get(&quot;p_posId&quot;);
c_wagerId = vars.get(&quot;c_wagerId&quot;);
threadnum = ${__threadNum};
datetime = &quot;${__time(yyyy_MM_dd_HH_mm_ss)}&quot;;

this.interpreter.setOut(p); 
//p.println(p_playerLogin+ &quot;,&quot; +c_walletType+ &quot;,&quot; +c_walletBalance+ &quot;,&quot;+threadnum+ &quot;,&quot; +iteration);
p.println(&quot;Player ID: &quot; +c_playerId+ &quot;, POS ID: &quot; +p_posId+ &quot;, Wager ID: &quot; +c_wagerId+ &quot;, Thread Number: &quot;+threadnum+ &quot;, Iteration Number: &quot; +iteration+&quot;, Time: &quot;+datetime);

f.close();
//log.info(&quot;LOGIN FAILED, PLAYER: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + ${__threadNum}+ &quot;, Iteration: &quot; +iteration);
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchWagerHistory: GET /wager-history-api/v1/wagers?wagerIds={serialNumber}  - PDS" enabled="false">
          <stringProp name="HTTPSampler.domain">${p_basePDSUrl}</stringProp>
          <stringProp name="HTTPSampler.path">/wager-history-api/v1/wagers?wagerIds=5400003178800900106946386533</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer;

String path=FileServer.getFileServer().getBaseDir();

f = new FileOutputStream(&quot;C://SGI_Performance//sg_perf_test//data//result_player_details_login.csv&quot;,true);
p = new PrintStream(f); 

iteration = vars.getIteration();
p_playerLogin = vars.get(&quot;p_playerLogin&quot;);
c_playerId = vars.get(&quot;c_playerId&quot;);
c_walletBalance = vars.get(&quot;c_walletBalance&quot;);
threadnum = ${__threadNum};
datetime = &quot;${__time(yyyy_MM_dd_HH_mm_ss)}&quot;;

this.interpreter.setOut(p); 
//p.println(p_playerLogin+ &quot;,&quot; +c_walletType+ &quot;,&quot; +c_walletBalance+ &quot;,&quot;+threadnum+ &quot;,&quot; +iteration);
p.println(&quot;Player Login: &quot; +p_playerLogin+ &quot;, Player ID: &quot; +c_playerId+ &quot;, Wallet Balance: &quot; +c_walletBalance+ &quot;, Thread Number: &quot;+threadnum+ &quot;, Iteration Number: &quot; +iteration+&quot;, Time: &quot;+datetime);

f.close();
//log.info(&quot;LOGIN FAILED, PLAYER: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + ${__threadNum}+ &quot;, Iteration: &quot; +iteration);
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchPrizeInquiry: PATCH /rcs-ige-prize-payout/v1/tickets/{ticketNo}/prize-inquiry - IGE" enabled="false">
          <stringProp name="HTTPSampler.domain">${p_baseIGEUrl}</stringProp>
          <stringProp name="HTTPSampler.path">/rcs-ige-prize-payout/v1/tickets/5400003178800900106946386533/prize-inquiry</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">PATCH</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;validationData&quot;: &quot;80222465&quot;,&#xd;
  &quot;isScanned&quot;: true,&#xd;
  &quot;scanned&quot;: true&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer;

String path=FileServer.getFileServer().getBaseDir();

f = new FileOutputStream(&quot;C://SGI_Performance//sg_perf_test//data//result_player_details_login.csv&quot;,true);
p = new PrintStream(f); 

iteration = vars.getIteration();
p_playerLogin = vars.get(&quot;p_playerLogin&quot;);
c_playerId = vars.get(&quot;c_playerId&quot;);
c_walletBalance = vars.get(&quot;c_walletBalance&quot;);
threadnum = ${__threadNum};
datetime = &quot;${__time(yyyy_MM_dd_HH_mm_ss)}&quot;;

this.interpreter.setOut(p); 
//p.println(p_playerLogin+ &quot;,&quot; +c_walletType+ &quot;,&quot; +c_walletBalance+ &quot;,&quot;+threadnum+ &quot;,&quot; +iteration);
p.println(&quot;Player Login: &quot; +p_playerLogin+ &quot;, Player ID: &quot; +c_playerId+ &quot;, Wallet Balance: &quot; +c_walletBalance+ &quot;, Thread Number: &quot;+threadnum+ &quot;, Iteration Number: &quot; +iteration+&quot;, Time: &quot;+datetime);

f.close();
//log.info(&quot;LOGIN FAILED, PLAYER: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + ${__threadNum}+ &quot;, Iteration: &quot; +iteration);
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="StandaloneLogin_RampUp" enabled="false">
        <intProp name="ThreadGroup.num_threads">320</intProp>
        <intProp name="ThreadGroup.ramp_time">180</intProp>
        <longProp name="ThreadGroup.duration">1080</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Test Data: Player Details (Login)" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">C:/SGI_Performance/sg_perf_test/data/player_details_login.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">p_playerLogin</stringProp>
        </CSVDataSet>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Request Index Header" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">vars.put(&quot;p_guid&quot;, UUID.randomUUID().toString());
vars.put(&quot;p_gameId&quot;, (new String[]{&quot;12&quot;, &quot;20&quot;, &quot;22&quot;, &quot;25&quot;})[(int)(Math.random() * 4)]);
//log.info(&quot;Generated requestIndex for Session is: &quot; + vars.get(&quot;p_guid&quot;));
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login: POST /pfi/login - UPAM" enabled="true">
          <stringProp name="HTTPSampler.path">/pfi/login</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">player</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">type</stringProp>
              </elementProp>
              <elementProp name="email" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${p_playerLogin}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">email</stringProp>
              </elementProp>
              <elementProp name="password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${p_password}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">password</stringProp>
              </elementProp>
              <elementProp name="clientSecret" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${p_clientSecret}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">clientSecret</stringProp>
              </elementProp>
              <elementProp name="clientId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${p_clientId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">clientId</stringProp>
              </elementProp>
              <elementProp name="channel" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${p_channel}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">channel</stringProp>
              </elementProp>
              <elementProp name="ip" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${p_ip}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">ip</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
vars.put(&quot;c_playerBearerToken&quot;, response.data.id.toString());
vars.put(&quot;c_playerId&quot;, response.data.attributes.playerId.toString());
vars.put(&quot;c_playerRefreshToken&quot;, response.data.attributes.refreshToken.toString());

//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; PLAYER_ID: &quot; + vars.get(&quot;c_playerId&quot;) + &quot; PLAYER_BEARER_TOKEN: &quot; + vars.get(&quot;c_playerBearerToken&quot;) + &quot; PLAYER_REFRESH_TOEKN: &quot; + vars.get(&quot;c_playerRefreshToken&quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchWalletBalance: GET /pfi/wallets/{playerId} - UPAM" enabled="true">
          <stringProp name="HTTPSampler.path">/pfi/wallets/${c_playerId}</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

//vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
vars.put(&quot;c_walletType&quot;, response.data.attributes.balances[2].id.toString());
vars.put(&quot;c_walletBalance&quot;, response.data.attributes.balances[2].available.toString());

//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; WALLET_TYPE: &quot; + vars.get(&quot;c_walletType&quot;) + &quot; WALLET_BALANCE: &quot; + vars.get(&quot;c_walletBalance&quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchWinningsToProcess: GET /pfi/players/{playerId}/winnings-to-process - UPAM" enabled="true">
          <stringProp name="HTTPSampler.path">/pfi/players/${c_playerId}/winnings-to-process</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="c_winningId" enabled="false">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">c_winningId</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">&quot;id&quot;:&quot;</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">&quot;,</stringProp>
            <stringProp name="BoundaryExtractor.default"></stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number"></stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

def winningsId = response.data.findAll { it.attributes.status == &quot;pending-player-ack&quot; &amp;&amp; it.attributes.acknowledged == false }*.id


// Select the 2nd ID (index 1 since Groovy lists are 0-based)
vars.put(&quot;c_winningsId&quot;, winningsId.size() &gt; 0 ? winningsId[0] : null);
</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchPlayerProfile: GET /pfi/profile/players/{playerId}/details - UPAM" enabled="true">
          <stringProp name="HTTPSampler.path">/pfi/profile/players/${c_playerId}/details</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request Check" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

vars.put(&quot;c_tcIp&quot;, response.data.attributes.termsAndConditions[0].ip.toString());
vars.put(&quot;c_tcOriginalVersion&quot;, response.data.attributes.termsAndConditions[0].revision.toString());

//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${playerLogin}&quot; + &quot; PLAYER_ID: &quot; + vars.get(&quot;playerId&quot;) + &quot; LOCATION_ID: &quot; + vars.get(&quot;location&quot;) + &quot; TOKEN: &quot; + vars.get(&quot;authorization_token&quot;));
//log.info(&quot; TC_TYPE: &quot; + vars.get(&quot;c_tcIp&quot;));
//log.info(&quot; TC_ORIGINAL_VERSION: &quot; + vars.get(&quot;c_tcOriginalVersion&quot;));

</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchPaymentMethods: GET /pfi/players/{playerId}/payment-methods - UPAM" enabled="true">
          <stringProp name="HTTPSampler.path">/pfi/players/${c_playerId}/payment-methods</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

// Collect IDs for objects with type &quot;creditCard&quot;
def creditCardIds = response.data.findAll { it.attributes.type == &quot;creditCard&quot; &amp;&amp; it.attributes.isValid == true }*.id

// Select the 2nd ID (index 1 since Groovy lists are 0-based)
vars.put(&quot;c_paymentMethodId&quot;, creditCardIds.size() &gt; 0 ? creditCardIds[0] : null);

//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; PAYMENT METHOD ID: &quot; + vars.get(&quot;c_paymentMethodId&quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deposits: POST /pfi/players/{playerId}/deposits - UPAM" enabled="true">
          <stringProp name="HTTPSampler.path">/pfi/players/${c_playerId}/deposits</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;deposit&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;amount&quot;: ${p_adjustmentAmount},&#xd;
      &quot;currency&quot;: &quot;NZD&quot;,&#xd;
      &quot;paymentMethodId&quot;: &quot;${c_paymentMethodId}&quot;,&#xd;
      &quot;ledger&quot;: &quot;real-money&quot;,&#xd;
      &quot;channel&quot;: &quot;DESKTOP&quot;,&#xd;
      &quot;capture&quot;: true,&#xd;
      &quot;acceptRedirectUrl&quot;: &quot;http://frontend/accept&quot;,&#xd;
      &quot;cancelRedirectUrl&quot;: &quot;http://frontend/cancel&quot;,&#xd;
      &quot;3dsecure&quot;: true&#xd;
    }&#xd;
  }&#xd;
}&#xd;
 </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

//vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
vars.put(&quot;c_transactionId&quot;, response.data.id.toString());

//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; TOP UP ID: &quot; + vars.get(&quot;c_topUpId&quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="sessionId2" enabled="false">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">c_sessionId2</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">&quot;id&quot;:&quot;</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">&quot;,</stringProp>
            <stringProp name="BoundaryExtractor.default"></stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="redirectURL2" enabled="false">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">c_redirectURL2</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">&quot;urlToRedirect&quot;:&quot;</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">&quot;</stringProp>
            <stringProp name="BoundaryExtractor.default"></stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchBlockedGames: GET /pfi/exclusions/players/{playerId}/ - UPAM" enabled="true">
          <stringProp name="HTTPSampler.path">/pfi/exclusions/players/${c_playerId}/</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchSpendLimits: GET /limits/players/{playerId} - UPAM" enabled="true">
          <stringProp name="HTTPSampler.path">/pfi/limits/players/${c_playerId}</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="filter%5Bstatus%5D" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">active%2Cplanned</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">filter%5Bstatus%5D</stringProp>
              </elementProp>
              <elementProp name="expand" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">counters</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">expand</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchCurrentDraw: GET /draw-history-api/v1/games/{gameId}/draws/next - PDS" enabled="true">
          <stringProp name="HTTPSampler.domain">${p_basePDSUrl}</stringProp>
          <stringProp name="HTTPSampler.path">/draw-history-api/v1/games/${p_gameId}/draws/next?by=SELL_END_DATE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="c_drawNumber" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">c_drawNumber</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">&quot;drawNo&quot;:</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">,&quot;</stringProp>
            <stringProp name="BoundaryExtractor.default"></stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number"></stringProp>
          </BoundaryExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchCurrentDraw: GET /draw-history-api/v1/games/{gameId}/draws/{drawNumber} - PDS" enabled="true">
          <stringProp name="HTTPSampler.domain">${p_basePDSUrl}</stringProp>
          <stringProp name="HTTPSampler.path">/draw-history-api/v1/games/20/draws/40</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchGameHistory: GET /pfi/players/{playerId}/game-history - UPAM" enabled="true">
          <stringProp name="HTTPSampler.path">/pfi/players/${c_playerId}/game-history</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="filter%5Bfrom%5D" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">2024-12-28</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">filter%5Bfrom%5D</stringProp>
              </elementProp>
              <elementProp name="filter%5Bto%5D" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">2025-03-31</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">filter%5Bto%5D</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

//vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
vars.put(&quot;c_wagerId&quot;, response.data[0].parentExternalId.toString());


//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; WAGER ID: &quot; + vars.get(&quot;c_wagerId&quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="c_wagerId" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">c_wagerId</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">&quot;parentExternalId&quot;:&quot;</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">&quot;,</stringProp>
            <stringProp name="BoundaryExtractor.default"></stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number"></stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="c_gameHistoryId" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">c_gameHistoryId</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">&quot;id&quot;:&quot;</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">&quot;,&quot;</stringProp>
            <stringProp name="BoundaryExtractor.default"></stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">0</stringProp>
          </BoundaryExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchFavourites: GET /pfi/profile/players/{playerId}/favorite-bets - UPAM" enabled="true">
          <stringProp name="HTTPSampler.path">/pfi/profile/players/${c_playerId}/favorite-bets</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchWagerHistory: POST /wager-history-api/v1/wagers/get-many - PDS" enabled="true">
          <stringProp name="HTTPSampler.domain">${p_basePDSUrl}</stringProp>
          <stringProp name="HTTPSampler.path">/wager-history-api/v1/wagers/get-many</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[&#xd;
  &quot;${c_wagerId}&quot;&#xd;
]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer;

String path=FileServer.getFileServer().getBaseDir();

f = new FileOutputStream(&quot;C://SGI_Performance//sg_perf_test//data//result_player_details_login.csv&quot;,true);
p = new PrintStream(f); 

iteration = vars.getIteration();
p_playerLogin = vars.get(&quot;p_playerLogin&quot;);
c_playerId = vars.get(&quot;c_playerId&quot;);
c_walletBalance = vars.get(&quot;c_walletBalance&quot;);
threadnum = ${__threadNum};
datetime = &quot;${__time(yyyy_MM_dd_HH_mm_ss)}&quot;;

this.interpreter.setOut(p); 
//p.println(p_playerLogin+ &quot;,&quot; +c_walletType+ &quot;,&quot; +c_walletBalance+ &quot;,&quot;+threadnum+ &quot;,&quot; +iteration);
p.println(&quot;Player Login: &quot; +p_playerLogin+ &quot;, Player ID: &quot; +c_playerId+ &quot;, Wallet Balance: &quot; +c_walletBalance+ &quot;, Thread Number: &quot;+threadnum+ &quot;, Iteration Number: &quot; +iteration+&quot;, Time: &quot;+datetime);

f.close();
//log.info(&quot;LOGIN FAILED, PLAYER: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + ${__threadNum}+ &quot;, Iteration: &quot; +iteration);
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <doubleProp>
            <name>throughput</name>
            <value>46800.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
        </ConstantThroughputTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="StandaloneRegisterWagers_RampUp">
        <intProp name="ThreadGroup.num_threads">150</intProp>
        <intProp name="ThreadGroup.ramp_time">180</intProp>
        <longProp name="ThreadGroup.duration">1980</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Request Index Header" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">vars.put(&quot;p_guid&quot;, UUID.randomUUID().toString());
vars.put(&quot;p_gameId&quot;, (new String[]{&quot;12&quot;, &quot;20&quot;, &quot;22&quot;, &quot;25&quot;})[(int)(Math.random() * 4)]);
//log.info(&quot;Generated requestIndex for Session is: &quot; + vars.get(&quot;p_guid&quot;));
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Test Data: Player Details" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">C:/SGI_Performance/sg_perf_test/data/player_details_login.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">p_playerLogin,c_playerId</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Test Data: Player Details (Wagers)" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">C:/SGI_Performance/sg_perf_test/data/player_details_wagers.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">p_playerLogin,c_playerId</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RegisterWager(LottoPBStrike): POST /rcs-dge-wager/v1/wagers - DGE" enabled="false">
          <stringProp name="HTTPSampler.domain">${p_baseRCSUrl}</stringProp>
          <stringProp name="HTTPSampler.path">/rcs-dge-wager/v1/wagers</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;playerData&quot;: {&#xd;
    &quot;playerId&quot;: &quot;${c_playerId}&quot;&#xd;
  },&#xd;
  &quot;wagerRequestData&quot;: {&#xd;
    &quot;playMethodNo&quot;: 2,&#xd;
    &quot;wagerTypeNo&quot;: 14,&#xd;
    &quot;wagerDefNo&quot;: 72,&#xd;
    &quot;betDataReq&quot;: [&#xd;
      {&#xd;
        &quot;gameId&quot;: 20,&#xd;
        &quot;drawCount&quot;: 1,&#xd;
        &quot;drawDayNo&quot;: 72,&#xd;
        &quot;panels&quot;: [&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },          &#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          }&#xd;
        ]&#xd;
      },&#xd;
      {&#xd;
        &quot;gameId&quot;: 12,&#xd;
        &quot;drawCount&quot;: 1,&#xd;
        &quot;drawDayNo&quot;: 72,&#xd;
        &quot;panels&quot;: [&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          }&#xd;
        ]&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-correlation-id</stringProp>
                <stringProp name="Header.value">${p_guid}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-device-type</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-device-user-id</stringProp>
                <stringProp name="Header.value">10076</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-jurisdiction-id</stringProp>
                <stringProp name="Header.value">54</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-pos-id</stringProp>
                <stringProp name="Header.value">525802</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-sales-channel</stringProp>
                <stringProp name="Header.value">10</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-pos-device-socket-id</stringProp>
                <stringProp name="Header.value">52580200</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

//vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
//vars.put(&quot;c_wagerPrice&quot;, response.wagerResponseData[0].wagerPrice.toString());
vars.put(&quot;c_wagerId&quot;, response.wagerResponseData[0].wagerId.toString());


//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; WAGER (DIP: Triple) PRICE: &quot; + vars.get(&quot;c_wagerPrice&quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer;

String path=FileServer.getFileServer().getBaseDir();

f = new FileOutputStream(&quot;C://SGI_Performance//sg_perf_test//data//result_player_details_wagers.csv&quot;,true);
p = new PrintStream(f); 

iteration = vars.getIteration();
c_playerId = vars.get(&quot;c_playerId&quot;);
p_posId = vars.get(&quot;p_posId&quot;);
c_wagerId = vars.get(&quot;c_wagerId&quot;);
threadnum = ${__threadNum};
datetime = &quot;${__time(yyyy_MM_dd_HH_mm_ss)}&quot;;

this.interpreter.setOut(p); 
//p.println(p_playerLogin+ &quot;,&quot; +c_walletType+ &quot;,&quot; +c_walletBalance+ &quot;,&quot;+threadnum+ &quot;,&quot; +iteration);
p.println(&quot;Player ID: &quot; +c_playerId+ &quot;, Wager ID: &quot; +c_wagerId+ &quot;, Thread Number: &quot;+threadnum+ &quot;, Iteration Number: &quot; +iteration+&quot;, Time: &quot;+datetime);

f.close();
//log.info(&quot;LOGIN FAILED, PLAYER: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + ${__threadNum}+ &quot;, Iteration: &quot; +iteration);
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RegisterWager(LottoPB): POST /rcs-dge-wager/v1/wagers - DGE">
          <stringProp name="HTTPSampler.domain">${p_baseRCSUrl}</stringProp>
          <stringProp name="HTTPSampler.path">/rcs-dge-wager/v1/wagers</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;playerData&quot;: {&#xd;
    &quot;playerId&quot;: &quot;${c_playerId}&quot;&#xd;
  },&#xd;
  &quot;wagerRequestData&quot;: {&#xd;
    &quot;playMethodNo&quot;: 2,&#xd;
    &quot;wagerTypeNo&quot;: 14,&#xd;
    &quot;wagerDefNo&quot;: 21,&#xd;
    &quot;betDataReq&quot;: [&#xd;
      {&#xd;
        &quot;gameId&quot;: 20,&#xd;
        &quot;drawCount&quot;: 2,&#xd;
        &quot;drawDayNo&quot;: 8,&#xd;
        &quot;panels&quot;: [&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          }&#xd;
        ]&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-correlation-id</stringProp>
                <stringProp name="Header.value">${p_guid}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-device-type</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-device-user-id</stringProp>
                <stringProp name="Header.value">10076</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-jurisdiction-id</stringProp>
                <stringProp name="Header.value">54</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-pos-id</stringProp>
                <stringProp name="Header.value">525802</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-sales-channel</stringProp>
                <stringProp name="Header.value">10</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-pos-device-socket-id</stringProp>
                <stringProp name="Header.value">52580200</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//	log.info(&quot;Failed:&quot; + &quot;${p_playerLogin}&quot; + &quot;,&quot; + &quot;${c_playerId}&quot;);
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

//vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
//vars.put(&quot;c_wagerPrice&quot;, response.wagerResponseData[0].wagerPrice.toString());
vars.put(&quot;c_wagerId&quot;, response.wagerResponseData[0].wagerId.toString());

	//log.info(&quot;Passed:&quot; + &quot;${p_playerLogin}&quot; + &quot;,&quot; + &quot;${c_playerId}&quot;);

//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; WAGER (DIP: Triple) PRICE: &quot; + vars.get(&quot;c_wagerPrice&quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer;

String path=FileServer.getFileServer().getBaseDir();

f = new FileOutputStream(&quot;C://SGI_Performance//sg_perf_test//data//result_player_details_wagers.csv&quot;,true);
p = new PrintStream(f); 

iteration = vars.getIteration();
c_playerId = vars.get(&quot;c_playerId&quot;);
p_playerLogin = vars.get(&quot;p_playerLogin&quot;);
p_posId = vars.get(&quot;p_posId&quot;);
c_wagerId = vars.get(&quot;c_wagerId&quot;);
threadnum = ${__threadNum};
datetime = &quot;${__time(yyyy_MM_dd_HH_mm_ss)}&quot;;

this.interpreter.setOut(p); 
//p.println(p_playerLogin+ &quot;,&quot; +c_walletType+ &quot;,&quot; +c_walletBalance+ &quot;,&quot;+threadnum+ &quot;,&quot; +iteration);
p.println(p_playerLogin+&quot;,&quot;+c_playerId+&quot;,&quot;+c_wagerId+ &quot;,Thread:&quot;+threadnum+ &quot;,Iteration:&quot; +iteration+&quot;,Time:&quot;+datetime);

f.close();
//log.info(&quot;LOGIN FAILED, PLAYER: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + ${__threadNum}+ &quot;, Iteration: &quot; +iteration);
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RegisterWager(Strike): POST /rcs-dge-wager/v1/wagers - DGE" enabled="false">
          <stringProp name="HTTPSampler.domain">${p_baseRCSUrl}</stringProp>
          <stringProp name="HTTPSampler.path">/rcs-dge-wager/v1/wagers</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;playerData&quot;: {&#xd;
    &quot;playerId&quot;: &quot;${c_playerId}&quot;&#xd;
  },&#xd;
  &quot;wagerRequestData&quot;: {&#xd;
    &quot;playMethodNo&quot;: 2,&#xd;
    &quot;wagerTypeNo&quot;: 14,&#xd;
    &quot;wagerDefNo&quot;: 14,&#xd;
    &quot;betDataReq&quot;: [&#xd;
      {&#xd;
        &quot;gameId&quot;: 12,&#xd;
        &quot;drawCount&quot;: 1,&#xd;
        &quot;drawDayNo&quot;: 8,&#xd;
        &quot;panels&quot;: [&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          }&#xd;
        ]&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-correlation-id</stringProp>
                <stringProp name="Header.value">${p_guid}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-device-type</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-device-user-id</stringProp>
                <stringProp name="Header.value">10076</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-jurisdiction-id</stringProp>
                <stringProp name="Header.value">54</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-pos-id</stringProp>
                <stringProp name="Header.value">525802</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-sales-channel</stringProp>
                <stringProp name="Header.value">10</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-pos-device-socket-id</stringProp>
                <stringProp name="Header.value">52580200</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

//vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
//vars.put(&quot;c_wagerPrice&quot;, response.wagerResponseData[0].wagerPrice.toString());
vars.put(&quot;c_wagerId&quot;, response.wagerResponseData[0].wagerId.toString());


//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; WAGER (DIP: Triple) PRICE: &quot; + vars.get(&quot;c_wagerPrice&quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer;

String path=FileServer.getFileServer().getBaseDir();

f = new FileOutputStream(&quot;C://SGI_Performance//sg_perf_test//data//result_player_details_wagers.csv&quot;,true);
p = new PrintStream(f); 

iteration = vars.getIteration();
c_playerId = vars.get(&quot;c_playerId&quot;);
p_posId = vars.get(&quot;p_posId&quot;);
c_wagerId = vars.get(&quot;c_wagerId&quot;);
threadnum = ${__threadNum};
datetime = &quot;${__time(yyyy_MM_dd_HH_mm_ss)}&quot;;

this.interpreter.setOut(p); 
//p.println(p_playerLogin+ &quot;,&quot; +c_walletType+ &quot;,&quot; +c_walletBalance+ &quot;,&quot;+threadnum+ &quot;,&quot; +iteration);
p.println(&quot;Player ID: &quot; +c_playerId+ &quot;, POS ID: &quot; +p_posId+ &quot;, Wager ID: &quot; +c_wagerId+ &quot;, Thread Number: &quot;+threadnum+ &quot;, Iteration Number: &quot; +iteration+&quot;, Time: &quot;+datetime);

f.close();
//log.info(&quot;LOGIN FAILED, PLAYER: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + ${__threadNum}+ &quot;, Iteration: &quot; +iteration);
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <doubleProp>
            <name>throughput</name>
            <value>3600.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
        </ConstantThroughputTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="StandaloneDeposits_RampUp" enabled="false">
        <intProp name="ThreadGroup.num_threads">100</intProp>
        <intProp name="ThreadGroup.ramp_time">180</intProp>
        <longProp name="ThreadGroup.duration">1080</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Test Data: Player Details (Deposits)" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">C:/SGI_Performance/sg_perf_test/data/player_details_deposits.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">p_playerLogin</stringProp>
        </CSVDataSet>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Request Index Header" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">vars.put(&quot;p_guid&quot;, UUID.randomUUID().toString());
vars.put(&quot;p_gameId&quot;, (new String[]{&quot;12&quot;, &quot;20&quot;, &quot;22&quot;, &quot;25&quot;})[(int)(Math.random() * 4)]);
//log.info(&quot;Generated requestIndex for Session is: &quot; + vars.get(&quot;p_guid&quot;));
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login: POST /pfi/login - UPAM" enabled="true">
          <stringProp name="HTTPSampler.path">/pfi/login</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">player</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">type</stringProp>
              </elementProp>
              <elementProp name="email" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${p_playerLogin}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">email</stringProp>
              </elementProp>
              <elementProp name="password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${p_password}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">password</stringProp>
              </elementProp>
              <elementProp name="clientSecret" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${p_clientSecret}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">clientSecret</stringProp>
              </elementProp>
              <elementProp name="clientId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${p_clientId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">clientId</stringProp>
              </elementProp>
              <elementProp name="channel" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${p_channel}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">channel</stringProp>
              </elementProp>
              <elementProp name="ip" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${p_ip}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">ip</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
vars.put(&quot;c_playerBearerToken&quot;, response.data.id.toString());
vars.put(&quot;c_playerId&quot;, response.data.attributes.playerId.toString());
vars.put(&quot;c_playerRefreshToken&quot;, response.data.attributes.refreshToken.toString());

//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; PLAYER_ID: &quot; + vars.get(&quot;c_playerId&quot;) + &quot; PLAYER_BEARER_TOKEN: &quot; + vars.get(&quot;c_playerBearerToken&quot;) + &quot; PLAYER_REFRESH_TOEKN: &quot; + vars.get(&quot;c_playerRefreshToken&quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchPaymentMethods: GET /pfi/players/{playerId}/payment-methods - UPAM" enabled="true">
          <stringProp name="HTTPSampler.path">/pfi/players/${c_playerId}/payment-methods</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

// Collect IDs for objects with type &quot;creditCard&quot;
def creditCardIds = response.data.findAll { it.attributes.type == &quot;creditCard&quot; &amp;&amp; it.attributes.isValid == true }*.id

// Select the 2nd ID (index 1 since Groovy lists are 0-based)
vars.put(&quot;c_paymentMethodId&quot;, creditCardIds.size() &gt; 0 ? creditCardIds[0] : null);

//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; PAYMENT METHOD ID: &quot; + vars.get(&quot;c_paymentMethodId&quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deposits: POST /pfi/players/{playerId}/deposits - UPAM" enabled="true">
          <stringProp name="HTTPSampler.path">/pfi/players/${c_playerId}/deposits</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;deposit&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;amount&quot;: ${p_adjustmentAmount},&#xd;
      &quot;currency&quot;: &quot;NZD&quot;,&#xd;
      &quot;paymentMethodId&quot;: &quot;${c_paymentMethodId}&quot;,&#xd;
      &quot;ledger&quot;: &quot;real-money&quot;,&#xd;
      &quot;channel&quot;: &quot;DESKTOP&quot;,&#xd;
      &quot;capture&quot;: true,&#xd;
      &quot;acceptRedirectUrl&quot;: &quot;http://frontend/accept&quot;,&#xd;
      &quot;cancelRedirectUrl&quot;: &quot;http://frontend/cancel&quot;,&#xd;
      &quot;3dsecure&quot;: true&#xd;
    }&#xd;
  }&#xd;
}&#xd;
 </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

//vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
vars.put(&quot;c_transactionId&quot;, response.data.id.toString());

//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; TOP UP ID: &quot; + vars.get(&quot;c_topUpId&quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer;

String path=FileServer.getFileServer().getBaseDir();

f = new FileOutputStream(&quot;C://SGI_Performance//sg_perf_test//data//result_player_details_deposits.csv&quot;,true);
p = new PrintStream(f); 

iteration = vars.getIteration();
p_playerLogin = vars.get(&quot;p_playerLogin&quot;);
c_playerId = vars.get(&quot;c_playerId&quot;);
//c_transactionId = vars.get(&quot;c_transactionId&quot;);
threadnum = ${__threadNum};
datetime = &quot;${__time(yyyy_MM_dd_HH_mm_ss)}&quot;;

this.interpreter.setOut(p); 
//p.println(p_playerLogin+ &quot;,&quot; +c_walletType+ &quot;,&quot; +c_walletBalance+ &quot;,&quot;+threadnum+ &quot;,&quot; +iteration);
p.println(&quot;Player Login: &quot;+p_playerLogin+&quot;, Player ID: &quot; +c_playerId+ &quot;, Thread Number: &quot;+threadnum+ &quot;, Iteration Number: &quot; +iteration+&quot;, Time: &quot;+datetime);

f.close();
//log.info(&quot;LOGIN FAILED, PLAYER: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + ${__threadNum}+ &quot;, Iteration: &quot; +iteration);
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <doubleProp>
            <name>throughput</name>
            <value>10800.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
        </ConstantThroughputTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="FindPlayerIDWithWagerIssue" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <longProp name="ThreadGroup.duration">1980</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">5</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Request Index Header" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">vars.put(&quot;p_guid&quot;, UUID.randomUUID().toString());
vars.put(&quot;p_gameId&quot;, (new String[]{&quot;12&quot;, &quot;20&quot;, &quot;22&quot;, &quot;25&quot;})[(int)(Math.random() * 4)]);
//log.info(&quot;Generated requestIndex for Session is: &quot; + vars.get(&quot;p_guid&quot;));
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Test Data: Player Details" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">C:/SGI_Performance/sg_perf_test/data/player_details_login.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">p_playerLogin,c_playerId</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Test Data: Player Details (Wagers)" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">C:/SGI_Performance/sg_perf_test/data/player_details_wagers.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">p_playerLogin,c_playerId</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RegisterWager(LottoPBStrike): POST /rcs-dge-wager/v1/wagers - DGE" enabled="false">
          <stringProp name="HTTPSampler.domain">${p_baseRCSUrl}</stringProp>
          <stringProp name="HTTPSampler.path">/rcs-dge-wager/v1/wagers</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;playerData&quot;: {&#xd;
    &quot;playerId&quot;: &quot;${c_playerId}&quot;&#xd;
  },&#xd;
  &quot;wagerRequestData&quot;: {&#xd;
    &quot;playMethodNo&quot;: 2,&#xd;
    &quot;wagerTypeNo&quot;: 14,&#xd;
    &quot;wagerDefNo&quot;: 72,&#xd;
    &quot;betDataReq&quot;: [&#xd;
      {&#xd;
        &quot;gameId&quot;: 20,&#xd;
        &quot;drawCount&quot;: 1,&#xd;
        &quot;drawDayNo&quot;: 72,&#xd;
        &quot;panels&quot;: [&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },          &#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          }&#xd;
        ]&#xd;
      },&#xd;
      {&#xd;
        &quot;gameId&quot;: 12,&#xd;
        &quot;drawCount&quot;: 1,&#xd;
        &quot;drawDayNo&quot;: 72,&#xd;
        &quot;panels&quot;: [&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          }&#xd;
        ]&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-correlation-id</stringProp>
                <stringProp name="Header.value">${p_guid}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-device-type</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-device-user-id</stringProp>
                <stringProp name="Header.value">10076</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-jurisdiction-id</stringProp>
                <stringProp name="Header.value">54</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-pos-id</stringProp>
                <stringProp name="Header.value">525802</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-sales-channel</stringProp>
                <stringProp name="Header.value">10</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-pos-device-socket-id</stringProp>
                <stringProp name="Header.value">52580200</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

//vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
//vars.put(&quot;c_wagerPrice&quot;, response.wagerResponseData[0].wagerPrice.toString());
vars.put(&quot;c_wagerId&quot;, response.wagerResponseData[0].wagerId.toString());


//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; WAGER (DIP: Triple) PRICE: &quot; + vars.get(&quot;c_wagerPrice&quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer;

String path=FileServer.getFileServer().getBaseDir();

f = new FileOutputStream(&quot;C://SGI_Performance//sg_perf_test//data//result_player_details_wagers.csv&quot;,true);
p = new PrintStream(f); 

iteration = vars.getIteration();
c_playerId = vars.get(&quot;c_playerId&quot;);
p_posId = vars.get(&quot;p_posId&quot;);
c_wagerId = vars.get(&quot;c_wagerId&quot;);
threadnum = ${__threadNum};
datetime = &quot;${__time(yyyy_MM_dd_HH_mm_ss)}&quot;;

this.interpreter.setOut(p); 
//p.println(p_playerLogin+ &quot;,&quot; +c_walletType+ &quot;,&quot; +c_walletBalance+ &quot;,&quot;+threadnum+ &quot;,&quot; +iteration);
p.println(&quot;Player ID: &quot; +c_playerId+ &quot;, Wager ID: &quot; +c_wagerId+ &quot;, Thread Number: &quot;+threadnum+ &quot;, Iteration Number: &quot; +iteration+&quot;, Time: &quot;+datetime);

f.close();
//log.info(&quot;LOGIN FAILED, PLAYER: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + ${__threadNum}+ &quot;, Iteration: &quot; +iteration);
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RegisterWager(LottoPB): POST /rcs-dge-wager/v1/wagers - DGE" enabled="true">
          <stringProp name="HTTPSampler.domain">${p_baseRCSUrl}</stringProp>
          <stringProp name="HTTPSampler.path">/rcs-dge-wager/v1/wagers</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;playerData&quot;: {&#xd;
    &quot;playerId&quot;: &quot;${c_playerId}&quot;&#xd;
  },&#xd;
  &quot;wagerRequestData&quot;: {&#xd;
    &quot;playMethodNo&quot;: 2,&#xd;
    &quot;wagerTypeNo&quot;: 14,&#xd;
    &quot;wagerDefNo&quot;: 21,&#xd;
    &quot;betDataReq&quot;: [&#xd;
      {&#xd;
        &quot;gameId&quot;: 20,&#xd;
        &quot;drawCount&quot;: 1,&#xd;
        &quot;drawDayNo&quot;: 8,&#xd;
        &quot;panels&quot;: [&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          }&#xd;
        ]&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-correlation-id</stringProp>
                <stringProp name="Header.value">${p_guid}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-device-type</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-device-user-id</stringProp>
                <stringProp name="Header.value">10076</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-jurisdiction-id</stringProp>
                <stringProp name="Header.value">54</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-pos-id</stringProp>
                <stringProp name="Header.value">525802</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-sales-channel</stringProp>
                <stringProp name="Header.value">10</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-pos-device-socket-id</stringProp>
                <stringProp name="Header.value">52580200</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     //prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info(&quot;Failed:&quot; + &quot;${p_playerLogin}&quot; + &quot;,&quot; + &quot;${c_playerId}&quot;);
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

//vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
//vars.put(&quot;c_wagerPrice&quot;, response.wagerResponseData[0].wagerPrice.toString());
vars.put(&quot;c_wagerId&quot;, response.wagerResponseData[0].wagerId.toString());

	log.info(&quot;Passed:&quot; + &quot;${p_playerLogin}&quot; + &quot;,&quot; + &quot;${c_playerId}&quot;);

//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; WAGER (DIP: Triple) PRICE: &quot; + vars.get(&quot;c_wagerPrice&quot;));
}
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Assertion>
        <hashTree/>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import org.apache.jmeter.services.FileServer;

String path=FileServer.getFileServer().getBaseDir();

f = new FileOutputStream(&quot;C://SGI_Performance//sg_perf_test//data//result_player_details_wagers.csv&quot;,true);
p = new PrintStream(f); 

iteration = vars.getIteration();
p_playerLogin = vars.get(&quot;p_playerLogin&quot;);
c_playerId = vars.get(&quot;c_playerId&quot;);
c_errormessage = vars.get(&quot;c_errormessage&quot;);
p_posId = vars.get(&quot;p_posId&quot;);
c_wagerId = vars.get(&quot;c_wagerId&quot;);
threadnum = ${__threadNum};
datetime = &quot;${__time(yyyy_MM_dd_HH_mm_ss)}&quot;;

this.interpreter.setOut(p); 
//p.println(p_playerLogin+ &quot;,&quot; +c_walletType+ &quot;,&quot; +c_walletBalance+ &quot;,&quot;+threadnum+ &quot;,&quot; +iteration);
p.println(&quot;PlayerLogin:&quot;+p_playerLogin+&quot;,PlayerId:&quot; +c_playerId+ &quot;,ErroredPlayer: &quot; +c_errormessage+ &quot;, Thread Number: &quot;+threadnum+ &quot;, Iteration Number: &quot; +iteration+&quot;, Time: &quot;+datetime);

f.close();
//log.info(&quot;LOGIN FAILED, PLAYER: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + ${__threadNum}+ &quot;, Iteration: &quot; +iteration);
</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RegisterWager(Strike): POST /rcs-dge-wager/v1/wagers - DGE" enabled="false">
          <stringProp name="HTTPSampler.domain">${p_baseRCSUrl}</stringProp>
          <stringProp name="HTTPSampler.path">/rcs-dge-wager/v1/wagers</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;playerData&quot;: {&#xd;
    &quot;playerId&quot;: &quot;${c_playerId}&quot;&#xd;
  },&#xd;
  &quot;wagerRequestData&quot;: {&#xd;
    &quot;playMethodNo&quot;: 2,&#xd;
    &quot;wagerTypeNo&quot;: 14,&#xd;
    &quot;wagerDefNo&quot;: 14,&#xd;
    &quot;betDataReq&quot;: [&#xd;
      {&#xd;
        &quot;gameId&quot;: 12,&#xd;
        &quot;drawCount&quot;: 1,&#xd;
        &quot;drawDayNo&quot;: 8,&#xd;
        &quot;panels&quot;: [&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          }&#xd;
        ]&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-correlation-id</stringProp>
                <stringProp name="Header.value">${p_guid}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-device-type</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-device-user-id</stringProp>
                <stringProp name="Header.value">10076</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-jurisdiction-id</stringProp>
                <stringProp name="Header.value">54</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-pos-id</stringProp>
                <stringProp name="Header.value">525802</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-sales-channel</stringProp>
                <stringProp name="Header.value">10</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-pos-device-socket-id</stringProp>
                <stringProp name="Header.value">52580200</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

//vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
//vars.put(&quot;c_wagerPrice&quot;, response.wagerResponseData[0].wagerPrice.toString());
vars.put(&quot;c_wagerId&quot;, response.wagerResponseData[0].wagerId.toString());


//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; WAGER (DIP: Triple) PRICE: &quot; + vars.get(&quot;c_wagerPrice&quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer;

String path=FileServer.getFileServer().getBaseDir();

f = new FileOutputStream(&quot;C://SGI_Performance//sg_perf_test//data//result_player_details_wagers.csv&quot;,true);
p = new PrintStream(f); 

iteration = vars.getIteration();
c_playerId = vars.get(&quot;c_playerId&quot;);
p_posId = vars.get(&quot;p_posId&quot;);
c_wagerId = vars.get(&quot;c_wagerId&quot;);
threadnum = ${__threadNum};
datetime = &quot;${__time(yyyy_MM_dd_HH_mm_ss)}&quot;;

this.interpreter.setOut(p); 
//p.println(p_playerLogin+ &quot;,&quot; +c_walletType+ &quot;,&quot; +c_walletBalance+ &quot;,&quot;+threadnum+ &quot;,&quot; +iteration);
p.println(&quot;Player ID: &quot; +c_playerId+ &quot;, POS ID: &quot; +p_posId+ &quot;, Wager ID: &quot; +c_wagerId+ &quot;, Thread Number: &quot;+threadnum+ &quot;, Iteration Number: &quot; +iteration+&quot;, Time: &quot;+datetime);

f.close();
//log.info(&quot;LOGIN FAILED, PLAYER: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + ${__threadNum}+ &quot;, Iteration: &quot; +iteration);
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="false">
          <intProp name="calcMode">2</intProp>
          <doubleProp>
            <name>throughput</name>
            <value>3600.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
        </ConstantThroughputTimer>
        <hashTree/>
      </hashTree>
      <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="true">
        <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
          <collectionProp name="Arguments.arguments">
            <elementProp name="influxdbMetricsSender" elementType="Argument">
              <stringProp name="Argument.name">influxdbMetricsSender</stringProp>
              <stringProp name="Argument.value">org.apache.jmeter.visualizers.backend.influxdb.HttpMetricsSender</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxdbUrl" elementType="Argument">
              <stringProp name="Argument.name">influxdbUrl</stringProp>
              <stringProp name="Argument.value">http://10.82.111.114:8086/api/v2/write?org=${p_orgName}&amp;bucket=${p_bucketName}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="application" elementType="Argument">
              <stringProp name="Argument.name">application</stringProp>
              <stringProp name="Argument.value">${p_appName}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="measurement" elementType="Argument">
              <stringProp name="Argument.name">measurement</stringProp>
              <stringProp name="Argument.value">jmeter</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="summaryOnly" elementType="Argument">
              <stringProp name="Argument.name">summaryOnly</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="samplersRegex" elementType="Argument">
              <stringProp name="Argument.name">samplersRegex</stringProp>
              <stringProp name="Argument.value">.*</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="percentiles" elementType="Argument">
              <stringProp name="Argument.name">percentiles</stringProp>
              <stringProp name="Argument.value">90;95;99</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="testTitle" elementType="Argument">
              <stringProp name="Argument.name">testTitle</stringProp>
              <stringProp name="Argument.value">${p_testTitle}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="eventTags" elementType="Argument">
              <stringProp name="Argument.name">eventTags</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxdbToken" elementType="Argument">
              <stringProp name="Argument.name">influxdbToken</stringProp>
              <stringProp name="Argument.value">${p_influxdbToken}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="classname">org.apache.jmeter.visualizers.backend.influxdb.InfluxdbBackendListenerClient</stringProp>
      </BackendListener>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree_Errors">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree_Success" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="CSV Results (archive folder)" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">C:\SGI_Performance\sg_perf_test\archive\archive\CSV_${p_resultsFileName}.csv</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="JTL Default Fields (archive folder)" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">C:\SGI_Performance\sg_perf_test\archive\archive\DefaultFields_${p_resultsFileName}.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="JTL Selected Fields (results folder)" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>false</latency>
            <timestamp>true</timestamp>
            <success>false</success>
            <label>true</label>
            <code>true</code>
            <message>false</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename">C:\SGI_Performance\sg_perf_test\results\SelectedFields_${p_resultsFileName}.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="JTL Errors (archive folder)" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>true</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <fileName>true</fileName>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">C:\SGI_Performance\sg_perf_test\archive\archive\Errors_${p_resultsFileName}.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="JTL Selected Fields (archive folder)" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>false</latency>
            <timestamp>true</timestamp>
            <success>false</success>
            <label>true</label>
            <code>true</code>
            <message>false</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename">C:\SGI_Performance\sg_perf_test\archive\archive\SelectedFields_${p_resultsFileName}.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      <com.blazemeter.jmeter.threads.arrivals.ArrivalsThreadGroup guiclass="com.blazemeter.jmeter.threads.arrivals.ArrivalsThreadGroupGui" testclass="com.blazemeter.jmeter.threads.arrivals.ArrivalsThreadGroup" testname="StandaloneLogin_Arrivals" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">3600</stringProp>
        <stringProp name="RampUp">5</stringProp>
        <stringProp name="Steps">100</stringProp>
        <stringProp name="Hold">15</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
        <stringProp name="ConcurrencyLimit">1000</stringProp>
      </com.blazemeter.jmeter.threads.arrivals.ArrivalsThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Test Data: Player Details (Login)" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">C:/SGI_Performance/sg_perf_test/data/player_details_login.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">p_playerLogin</stringProp>
        </CSVDataSet>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Request Index Header" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">vars.put(&quot;p_guid&quot;, UUID.randomUUID().toString());
vars.put(&quot;p_gameId&quot;, (new String[]{&quot;12&quot;, &quot;20&quot;, &quot;22&quot;, &quot;25&quot;})[(int)(Math.random() * 4)]);
//log.info(&quot;Generated requestIndex for Session is: &quot; + vars.get(&quot;p_guid&quot;));
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login: POST /pfi/login - UPAM" enabled="true">
          <stringProp name="HTTPSampler.path">/pfi/login</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">player</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">type</stringProp>
              </elementProp>
              <elementProp name="email" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${p_playerLogin}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">email</stringProp>
              </elementProp>
              <elementProp name="password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${p_password}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">password</stringProp>
              </elementProp>
              <elementProp name="clientSecret" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${p_clientSecret}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">clientSecret</stringProp>
              </elementProp>
              <elementProp name="clientId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${p_clientId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">clientId</stringProp>
              </elementProp>
              <elementProp name="channel" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${p_channel}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">channel</stringProp>
              </elementProp>
              <elementProp name="ip" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${p_ip}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">ip</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
vars.put(&quot;c_playerBearerToken&quot;, response.data.id.toString());
vars.put(&quot;c_playerId&quot;, response.data.attributes.playerId.toString());
vars.put(&quot;c_playerRefreshToken&quot;, response.data.attributes.refreshToken.toString());

//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; PLAYER_ID: &quot; + vars.get(&quot;c_playerId&quot;) + &quot; PLAYER_BEARER_TOKEN: &quot; + vars.get(&quot;c_playerBearerToken&quot;) + &quot; PLAYER_REFRESH_TOEKN: &quot; + vars.get(&quot;c_playerRefreshToken&quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchWalletBalance: GET /pfi/wallets/{playerId} - UPAM" enabled="true">
          <stringProp name="HTTPSampler.path">/pfi/wallets/${c_playerId}</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

//vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
vars.put(&quot;c_walletType&quot;, response.data.attributes.balances[2].id.toString());
vars.put(&quot;c_walletBalance&quot;, response.data.attributes.balances[2].available.toString());

//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; WALLET_TYPE: &quot; + vars.get(&quot;c_walletType&quot;) + &quot; WALLET_BALANCE: &quot; + vars.get(&quot;c_walletBalance&quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchWinningsToProcess: GET /pfi/players/{playerId}/winnings-to-process - UPAM" enabled="true">
          <stringProp name="HTTPSampler.path">/pfi/players/${c_playerId}/winnings-to-process</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="c_winningId" enabled="false">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">c_winningId</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">&quot;id&quot;:&quot;</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">&quot;,</stringProp>
            <stringProp name="BoundaryExtractor.default"></stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number"></stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

def winningsId = response.data.findAll { it.attributes.status == &quot;pending-player-ack&quot; &amp;&amp; it.attributes.acknowledged == false }*.id


// Select the 2nd ID (index 1 since Groovy lists are 0-based)
vars.put(&quot;c_winningsId&quot;, winningsId.size() &gt; 0 ? winningsId[0] : null);
</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchPlayerProfile: GET /pfi/profile/players/{playerId}/details - UPAM" enabled="true">
          <stringProp name="HTTPSampler.path">/pfi/profile/players/${c_playerId}/details</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request Check" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

vars.put(&quot;c_tcIp&quot;, response.data.attributes.termsAndConditions[0].ip.toString());
vars.put(&quot;c_tcOriginalVersion&quot;, response.data.attributes.termsAndConditions[0].revision.toString());

//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${playerLogin}&quot; + &quot; PLAYER_ID: &quot; + vars.get(&quot;playerId&quot;) + &quot; LOCATION_ID: &quot; + vars.get(&quot;location&quot;) + &quot; TOKEN: &quot; + vars.get(&quot;authorization_token&quot;));
//log.info(&quot; TC_TYPE: &quot; + vars.get(&quot;c_tcIp&quot;));
//log.info(&quot; TC_ORIGINAL_VERSION: &quot; + vars.get(&quot;c_tcOriginalVersion&quot;));

</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchPaymentMethods: GET /pfi/players/{playerId}/payment-methods - UPAM" enabled="true">
          <stringProp name="HTTPSampler.path">/pfi/players/${c_playerId}/payment-methods</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

// Collect IDs for objects with type &quot;creditCard&quot;
def creditCardIds = response.data.findAll { it.attributes.type == &quot;creditCard&quot; &amp;&amp; it.attributes.isValid == true }*.id

// Select the 2nd ID (index 1 since Groovy lists are 0-based)
vars.put(&quot;c_paymentMethodId&quot;, creditCardIds.size() &gt; 0 ? creditCardIds[0] : null);

//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; PAYMENT METHOD ID: &quot; + vars.get(&quot;c_paymentMethodId&quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deposits: POST /pfi/players/{playerId}/deposits - UPAM" enabled="true">
          <stringProp name="HTTPSampler.path">/pfi/players/${c_playerId}/deposits</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;deposit&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;amount&quot;: ${p_adjustmentAmount},&#xd;
      &quot;currency&quot;: &quot;NZD&quot;,&#xd;
      &quot;paymentMethodId&quot;: &quot;${c_paymentMethodId}&quot;,&#xd;
      &quot;ledger&quot;: &quot;real-money&quot;,&#xd;
      &quot;channel&quot;: &quot;DESKTOP&quot;,&#xd;
      &quot;capture&quot;: true,&#xd;
      &quot;acceptRedirectUrl&quot;: &quot;http://frontend/accept&quot;,&#xd;
      &quot;cancelRedirectUrl&quot;: &quot;http://frontend/cancel&quot;,&#xd;
      &quot;3dsecure&quot;: true&#xd;
    }&#xd;
  }&#xd;
}&#xd;
 </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

//vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
vars.put(&quot;c_transactionId&quot;, response.data.id.toString());

//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; TOP UP ID: &quot; + vars.get(&quot;c_topUpId&quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="sessionId2" enabled="false">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">c_sessionId2</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">&quot;id&quot;:&quot;</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">&quot;,</stringProp>
            <stringProp name="BoundaryExtractor.default"></stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="redirectURL2" enabled="false">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">c_redirectURL2</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">&quot;urlToRedirect&quot;:&quot;</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">&quot;</stringProp>
            <stringProp name="BoundaryExtractor.default"></stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchBlockedGames: GET /pfi/exclusions/players/{playerId}/ - UPAM" enabled="true">
          <stringProp name="HTTPSampler.path">/pfi/exclusions/players/${c_playerId}/</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchSpendLimits: GET /limits/players/{playerId} - UPAM" enabled="true">
          <stringProp name="HTTPSampler.path">/pfi/limits/players/${c_playerId}</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="filter%5Bstatus%5D" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">active%2Cplanned</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">filter%5Bstatus%5D</stringProp>
              </elementProp>
              <elementProp name="expand" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">counters</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">expand</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchCurrentDraw: GET /draw-history-api/v1/games/{gameId}/draws/next - PDS" enabled="true">
          <stringProp name="HTTPSampler.domain">${p_basePDSUrl}</stringProp>
          <stringProp name="HTTPSampler.path">/draw-history-api/v1/games/${p_gameId}/draws/next?by=SELL_END_DATE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="c_drawNumber" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">c_drawNumber</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">&quot;drawNo&quot;:</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">,&quot;</stringProp>
            <stringProp name="BoundaryExtractor.default"></stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number"></stringProp>
          </BoundaryExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchCurrentDraw: GET /draw-history-api/v1/games/{gameId}/draws/{drawNumber} - PDS" enabled="false">
          <stringProp name="HTTPSampler.domain">${p_basePDSUrl}</stringProp>
          <stringProp name="HTTPSampler.path">/draw-history-api/v1/games/${p_gameId}/draws/${c_drawNumber}</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchCurrentDraw: GET /draw-history-api/v1/games/{gameId}/draws/{drawNumber} - PDS" enabled="true">
          <stringProp name="HTTPSampler.domain">${p_basePDSUrl}</stringProp>
          <stringProp name="HTTPSampler.path">/draw-history-api/v1/games/20/draws/40</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchGameHistory: GET /pfi/players/{playerId}/game-history - UPAM" enabled="true">
          <stringProp name="HTTPSampler.path">/pfi/players/${c_playerId}/game-history</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="filter%5Bfrom%5D" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">2024-12-28</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">filter%5Bfrom%5D</stringProp>
              </elementProp>
              <elementProp name="filter%5Bto%5D" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">2025-03-31</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">filter%5Bto%5D</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

//vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
vars.put(&quot;c_wagerId&quot;, response.data[0].parentExternalId.toString());


//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; WAGER ID: &quot; + vars.get(&quot;c_wagerId&quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="c_wagerId" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">c_wagerId</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">&quot;parentExternalId&quot;:&quot;</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">&quot;,</stringProp>
            <stringProp name="BoundaryExtractor.default"></stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number"></stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="c_gameHistoryId" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">c_gameHistoryId</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">&quot;id&quot;:&quot;</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">&quot;,&quot;</stringProp>
            <stringProp name="BoundaryExtractor.default"></stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">0</stringProp>
          </BoundaryExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchFavourites: GET /pfi/profile/players/{playerId}/favorite-bets - UPAM" enabled="true">
          <stringProp name="HTTPSampler.path">/pfi/profile/players/${c_playerId}/favorite-bets</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchWagerHistory: POST /wager-history-api/v1/wagers/get-many - PDS" enabled="true">
          <stringProp name="HTTPSampler.domain">${p_basePDSUrl}</stringProp>
          <stringProp name="HTTPSampler.path">/wager-history-api/v1/wagers/get-many</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[&#xd;
  &quot;${c_wagerId}&quot;&#xd;
]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer;

String path=FileServer.getFileServer().getBaseDir();

f = new FileOutputStream(&quot;C://SGI_Performance//sg_perf_test//data//result_player_details_login.csv&quot;,true);
p = new PrintStream(f); 

iteration = vars.getIteration();
p_playerLogin = vars.get(&quot;p_playerLogin&quot;);
c_playerId = vars.get(&quot;c_playerId&quot;);
c_walletBalance = vars.get(&quot;c_walletBalance&quot;);
threadnum = ${__threadNum};
datetime = &quot;${__time(yyyy_MM_dd_HH_mm_ss)}&quot;;

this.interpreter.setOut(p); 
//p.println(p_playerLogin+ &quot;,&quot; +c_walletType+ &quot;,&quot; +c_walletBalance+ &quot;,&quot;+threadnum+ &quot;,&quot; +iteration);
p.println(&quot;Player Login: &quot; +p_playerLogin+ &quot;, Player ID: &quot; +c_playerId+ &quot;, Wallet Balance: &quot; +c_walletBalance+ &quot;, Thread Number: &quot;+threadnum+ &quot;, Iteration Number: &quot; +iteration+&quot;, Time: &quot;+datetime);

f.close();
//log.info(&quot;LOGIN FAILED, PLAYER: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + ${__threadNum}+ &quot;, Iteration: &quot; +iteration);
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.arrivals.ArrivalsThreadGroup guiclass="com.blazemeter.jmeter.threads.arrivals.ArrivalsThreadGroupGui" testclass="com.blazemeter.jmeter.threads.arrivals.ArrivalsThreadGroup" testname="StandaloneRegisterWagers_Arrivals" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">3600</stringProp>
        <stringProp name="RampUp">3</stringProp>
        <stringProp name="Steps">20</stringProp>
        <stringProp name="Hold">15</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
        <stringProp name="ConcurrencyLimit">1000</stringProp>
      </com.blazemeter.jmeter.threads.arrivals.ArrivalsThreadGroup>
      <hashTree>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Request Index Header" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">vars.put(&quot;p_guid&quot;, UUID.randomUUID().toString());
vars.put(&quot;p_gameId&quot;, (new String[]{&quot;12&quot;, &quot;20&quot;, &quot;22&quot;, &quot;25&quot;})[(int)(Math.random() * 4)]);
//log.info(&quot;Generated requestIndex for Session is: &quot; + vars.get(&quot;p_guid&quot;));
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Test Data: Player Details (Wagers)" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">C:/SGI_Performance/sg_perf_test/data/player_details_wagers.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">c_playerId</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RegisterWager(LottoPB): POST /rcs-dge-wager/v1/wagers - DGE" enabled="true">
          <stringProp name="HTTPSampler.domain">${p_baseRCSUrl}</stringProp>
          <stringProp name="HTTPSampler.path">/rcs-dge-wager/v1/wagers</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;playerData&quot;: {&#xd;
    &quot;playerId&quot;: &quot;${c_playerId}&quot;&#xd;
  },&#xd;
  &quot;wagerRequestData&quot;: {&#xd;
    &quot;playMethodNo&quot;: 2,&#xd;
    &quot;wagerTypeNo&quot;: 14,&#xd;
    &quot;wagerDefNo&quot;: 21,&#xd;
    &quot;betDataReq&quot;: [&#xd;
      {&#xd;
        &quot;gameId&quot;: 20,&#xd;
        &quot;drawCount&quot;: 1,&#xd;
        &quot;drawDayNo&quot;: 8,&#xd;
        &quot;panels&quot;: [&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          }&#xd;
        ]&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-correlation-id</stringProp>
                <stringProp name="Header.value">${p_guid}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-device-type</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-device-user-id</stringProp>
                <stringProp name="Header.value">10076</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-jurisdiction-id</stringProp>
                <stringProp name="Header.value">54</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-pos-id</stringProp>
                <stringProp name="Header.value">525802</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-sales-channel</stringProp>
                <stringProp name="Header.value">10</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-pos-device-socket-id</stringProp>
                <stringProp name="Header.value">52580200</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

//vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
//vars.put(&quot;c_wagerPrice&quot;, response.wagerResponseData[0].wagerPrice.toString());
vars.put(&quot;c_wagerId&quot;, response.wagerResponseData[0].wagerId.toString());


//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; WAGER (DIP: Triple) PRICE: &quot; + vars.get(&quot;c_wagerPrice&quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer;

String path=FileServer.getFileServer().getBaseDir();

f = new FileOutputStream(&quot;C://SGI_Performance//sg_perf_test//data//result_player_details_wagers.csv&quot;,true);
p = new PrintStream(f); 

iteration = vars.getIteration();
c_playerId = vars.get(&quot;c_playerId&quot;);
p_posId = vars.get(&quot;p_posId&quot;);
c_wagerId = vars.get(&quot;c_wagerId&quot;);
threadnum = ${__threadNum};
datetime = &quot;${__time(yyyy_MM_dd_HH_mm_ss)}&quot;;

this.interpreter.setOut(p); 
//p.println(p_playerLogin+ &quot;,&quot; +c_walletType+ &quot;,&quot; +c_walletBalance+ &quot;,&quot;+threadnum+ &quot;,&quot; +iteration);
p.println(&quot;Player ID: &quot; +c_playerId+ &quot;, Wager ID: &quot; +c_wagerId+ &quot;, Thread Number: &quot;+threadnum+ &quot;, Iteration Number: &quot; +iteration+&quot;, Time: &quot;+datetime);

f.close();
//log.info(&quot;LOGIN FAILED, PLAYER: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + ${__threadNum}+ &quot;, Iteration: &quot; +iteration);
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RegisterWager: POST /rcs-dge-wager/v1/wagers - DGE" enabled="false">
          <stringProp name="HTTPSampler.domain">${p_baseRCSUrl}</stringProp>
          <stringProp name="HTTPSampler.path">/rcs-dge-wager/v1/wagers</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;playerData&quot;: {&#xd;
    &quot;playerId&quot;: &quot;${c_playerId}&quot;&#xd;
  },&#xd;
  &quot;wagerRequestData&quot;: {&#xd;
    &quot;playMethodNo&quot;: 2,&#xd;
    &quot;wagerTypeNo&quot;: 14,&#xd;
    &quot;wagerDefNo&quot;: 72,&#xd;
    &quot;betDataReq&quot;: [&#xd;
      {&#xd;
        &quot;gameId&quot;: 20,&#xd;
        &quot;drawCount&quot;: 1,&#xd;
        &quot;drawDayNo&quot;: 72,&#xd;
        &quot;panels&quot;: [&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },          &#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          }&#xd;
        ]&#xd;
      },&#xd;
      {&#xd;
        &quot;gameId&quot;: 12,&#xd;
        &quot;drawCount&quot;: 1,&#xd;
        &quot;drawDayNo&quot;: 72,&#xd;
        &quot;panels&quot;: [&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          }&#xd;
        ]&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-correlation-id</stringProp>
                <stringProp name="Header.value">${p_guid}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-device-type</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-device-user-id</stringProp>
                <stringProp name="Header.value">10076</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-jurisdiction-id</stringProp>
                <stringProp name="Header.value">54</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-pos-id</stringProp>
                <stringProp name="Header.value">525802</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-sales-channel</stringProp>
                <stringProp name="Header.value">10</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-pos-device-socket-id</stringProp>
                <stringProp name="Header.value">52580200</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-correlation-id</stringProp>
                <stringProp name="Header.value">${p_guid}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-device-type</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-device-user-id</stringProp>
                <stringProp name="Header.value">10076</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-jurisdiction-id</stringProp>
                <stringProp name="Header.value">54</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-pos-id</stringProp>
                <stringProp name="Header.value">${p_posId}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-sales-channel</stringProp>
                <stringProp name="Header.value">10</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-pos-device-socket-id</stringProp>
                <stringProp name="Header.value">${p_socketId}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

//vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
//vars.put(&quot;c_wagerPrice&quot;, response.wagerResponseData[0].wagerPrice.toString());
vars.put(&quot;c_wagerId&quot;, response.wagerResponseData[0].wagerId.toString());


//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; WAGER (DIP: Triple) PRICE: &quot; + vars.get(&quot;c_wagerPrice&quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer;

String path=FileServer.getFileServer().getBaseDir();

f = new FileOutputStream(&quot;C://SGI_Performance//sg_perf_test//data//result_player_details_wagers.csv&quot;,true);
p = new PrintStream(f); 

iteration = vars.getIteration();
c_playerId = vars.get(&quot;c_playerId&quot;);
p_posId = vars.get(&quot;p_posId&quot;);
c_wagerId = vars.get(&quot;c_wagerId&quot;);
threadnum = ${__threadNum};
datetime = &quot;${__time(yyyy_MM_dd_HH_mm_ss)}&quot;;

this.interpreter.setOut(p); 
//p.println(p_playerLogin+ &quot;,&quot; +c_walletType+ &quot;,&quot; +c_walletBalance+ &quot;,&quot;+threadnum+ &quot;,&quot; +iteration);
p.println(&quot;Player ID: &quot; +c_playerId+ &quot;, POS ID: &quot; +p_posId+ &quot;, Wager ID: &quot; +c_wagerId+ &quot;, Thread Number: &quot;+threadnum+ &quot;, Iteration Number: &quot; +iteration+&quot;, Time: &quot;+datetime);

f.close();
//log.info(&quot;LOGIN FAILED, PLAYER: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + ${__threadNum}+ &quot;, Iteration: &quot; +iteration);
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RegisterWager: POST /rcs-dge-wager/v1/wagers - DGE" enabled="false">
          <stringProp name="HTTPSampler.domain">${p_baseRCSUrl}</stringProp>
          <stringProp name="HTTPSampler.path">/rcs-dge-wager/v1/wagers</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;playerData&quot;: {&#xd;
    &quot;playerId&quot;: &quot;${c_playerId}&quot;&#xd;
  },&#xd;
  &quot;wagerRequestData&quot;: {&#xd;
    &quot;playMethodNo&quot;: 2,&#xd;
    &quot;wagerTypeNo&quot;: 14,&#xd;
    &quot;wagerDefNo&quot;: 121,&#xd;
    &quot;betDataReq&quot;: [&#xd;
      {&#xd;
        &quot;gameId&quot;: 22,&#xd;
        &quot;drawCount&quot;: 1,&#xd;
        &quot;drawSeqNo&quot;: 1,&#xd;
        &quot;panels&quot;: [&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 10,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          }&#xd;
        ]&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-correlation-id</stringProp>
                <stringProp name="Header.value">${p_guid}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-device-type</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-device-user-id</stringProp>
                <stringProp name="Header.value">10076</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-jurisdiction-id</stringProp>
                <stringProp name="Header.value">54</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-pos-id</stringProp>
                <stringProp name="Header.value">525802</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-sales-channel</stringProp>
                <stringProp name="Header.value">10</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-pos-device-socket-id</stringProp>
                <stringProp name="Header.value">52580200</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-correlation-id</stringProp>
                <stringProp name="Header.value">${p_guid}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-device-type</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-device-user-id</stringProp>
                <stringProp name="Header.value">10076</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-jurisdiction-id</stringProp>
                <stringProp name="Header.value">54</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-pos-id</stringProp>
                <stringProp name="Header.value">${p_posId}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-sales-channel</stringProp>
                <stringProp name="Header.value">10</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-pos-device-socket-id</stringProp>
                <stringProp name="Header.value">${p_socketId}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

//vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
//vars.put(&quot;c_wagerPrice&quot;, response.wagerResponseData[0].wagerPrice.toString());
vars.put(&quot;c_wagerId&quot;, response.wagerResponseData[0].wagerId.toString());

//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; WAGER (DIP: Keno) PRICE: &quot; + vars.get(&quot;c_wagerPrice&quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer;

String path=FileServer.getFileServer().getBaseDir();

f = new FileOutputStream(&quot;C://SGI_Performance//sg_perf_test//data//result_player_details_wagers.csv&quot;,true);
p = new PrintStream(f); 

iteration = vars.getIteration();
c_playerId = vars.get(&quot;c_playerId&quot;);
p_posId = vars.get(&quot;p_posId&quot;);
c_wagerId = vars.get(&quot;c_wagerId&quot;);
threadnum = ${__threadNum};
datetime = &quot;${__time(yyyy_MM_dd_HH_mm_ss)}&quot;;

this.interpreter.setOut(p); 
//p.println(p_playerLogin+ &quot;,&quot; +c_walletType+ &quot;,&quot; +c_walletBalance+ &quot;,&quot;+threadnum+ &quot;,&quot; +iteration);
p.println(&quot;Player ID: &quot; +c_playerId+ &quot;, POS ID: &quot; +p_posId+ &quot;, Wager ID: &quot; +c_wagerId+ &quot;, Thread Number: &quot;+threadnum+ &quot;, Iteration Number: &quot; +iteration+&quot;, Time: &quot;+datetime);

f.close();
//log.info(&quot;LOGIN FAILED, PLAYER: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + ${__threadNum}+ &quot;, Iteration: &quot; +iteration);
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="UserJourney_Validations" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">10</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Test Data: Player Details (Login)" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">C:/SGI_Performance/5_Performance_Testing/sg_perf_test/data/player_details_login.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">p_playerLogin</stringProp>
        </CSVDataSet>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Request Index Header" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">vars.put(&quot;p_guid&quot;, UUID.randomUUID().toString());
vars.put(&quot;p_gameId&quot;, &quot;20&quot;);
//vars.put(&quot;p_gameId&quot;, (new String[]{&quot;12&quot;, &quot;20&quot;, &quot;22&quot;, &quot;25&quot;})[(int)(Math.random() * 4)]);
//log.info(&quot;Generated requestIndex for Session is: &quot; + vars.get(&quot;p_guid&quot;));
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Login" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="/api/sessions: EMR-71: Session Login" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login: POST /pfi/login - UPAM" enabled="true">
              <stringProp name="HTTPSampler.path">/pfi/login</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">player</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">type</stringProp>
                  </elementProp>
                  <elementProp name="email" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${p_playerLogin}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">email</stringProp>
                  </elementProp>
                  <elementProp name="password" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${p_password}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">password</stringProp>
                  </elementProp>
                  <elementProp name="clientSecret" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${p_clientSecret}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">clientSecret</stringProp>
                  </elementProp>
                  <elementProp name="clientId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${p_clientId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">clientId</stringProp>
                  </elementProp>
                  <elementProp name="channel" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${p_channel}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">channel</stringProp>
                  </elementProp>
                  <elementProp name="ip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${p_ip}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">ip</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
vars.put(&quot;c_playerBearerToken&quot;, response.data.id.toString());
vars.put(&quot;c_playerId&quot;, response.data.attributes.playerId.toString());
vars.put(&quot;c_playerRefreshToken&quot;, response.data.attributes.refreshToken.toString());

//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; PLAYER_ID: &quot; + vars.get(&quot;c_playerId&quot;) + &quot; PLAYER_BEARER_TOKEN: &quot; + vars.get(&quot;c_playerBearerToken&quot;) + &quot; PLAYER_REFRESH_TOEKN: &quot; + vars.get(&quot;c_playerRefreshToken&quot;));
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="/api/players/{playerId}/wallets: EMR-65: Fetch Wallet Balance" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchWalletBalance: GET /pfi/wallets/{playerId} - UPAM" enabled="true">
              <stringProp name="HTTPSampler.path">/pfi/wallets/${c_playerId}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

//vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
vars.put(&quot;c_walletType&quot;, response.data.attributes.balances[2].id.toString());
vars.put(&quot;c_walletBalance&quot;, response.data.attributes.balances[2].available.toString());

//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; WALLET_TYPE: &quot; + vars.get(&quot;c_walletType&quot;) + &quot; WALLET_BALANCE: &quot; + vars.get(&quot;c_walletBalance&quot;));
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="/api/players/{playerId}/claims: EMR-70: List Claims" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchWinningsToProcess: GET /pfi/players/{playerId}/winnings-to-process - UPAM" enabled="true">
              <stringProp name="HTTPSampler.path">/pfi/players/${c_playerId}/winnings-to-process</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="c_winningId" enabled="false">
                <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                <stringProp name="BoundaryExtractor.refname">c_winningId</stringProp>
                <stringProp name="BoundaryExtractor.lboundary">&quot;id&quot;:&quot;</stringProp>
                <stringProp name="BoundaryExtractor.rboundary">&quot;,</stringProp>
                <stringProp name="BoundaryExtractor.default"></stringProp>
                <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                <stringProp name="BoundaryExtractor.match_number"></stringProp>
              </BoundaryExtractor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

def winningsId = response.data.findAll { it.attributes.status == &quot;pending-player-ack&quot; &amp;&amp; it.attributes.acknowledged == false }*.id


// Select the 2nd ID (index 1 since Groovy lists are 0-based)
vars.put(&quot;c_winningsId&quot;, winningsId.size() &gt; 0 ? winningsId[0] : null);
</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="/api/players/{playerId}/profiles: EMR-87: Retrive Player Profile" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchPlayerProfile: GET /pfi/profile/players/{playerId}/details - UPAM" enabled="true">
              <stringProp name="HTTPSampler.path">/pfi/profile/players/${c_playerId}/details</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request Check" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

vars.put(&quot;c_tcIp&quot;, response.data.attributes.termsAndConditions[0].ip.toString());
vars.put(&quot;c_tcOriginalVersion&quot;, response.data.attributes.termsAndConditions[0].revision.toString());

//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${playerLogin}&quot; + &quot; PLAYER_ID: &quot; + vars.get(&quot;playerId&quot;) + &quot; LOCATION_ID: &quot; + vars.get(&quot;location&quot;) + &quot; TOKEN: &quot; + vars.get(&quot;authorization_token&quot;));
//log.info(&quot; TC_TYPE: &quot; + vars.get(&quot;c_tcIp&quot;));
//log.info(&quot; TC_ORIGINAL_VERSION: &quot; + vars.get(&quot;c_tcOriginalVersion&quot;));

</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchPaymentMethods: GET /pfi/players/{playerId}/payment-methods - UPAM" enabled="true">
              <stringProp name="HTTPSampler.path">/pfi/players/${c_playerId}/payment-methods</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

// Collect IDs for objects with type &quot;creditCard&quot;
def creditCardIds = response.data.findAll { it.attributes.type == &quot;creditCard&quot; &amp;&amp; it.attributes.isValid == true }*.id

// Select the 2nd ID (index 1 since Groovy lists are 0-based)
vars.put(&quot;c_paymentMethodId&quot;, creditCardIds.size() &gt; 0 ? creditCardIds[0] : null);

//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; PAYMENT METHOD ID: &quot; + vars.get(&quot;c_paymentMethodId&quot;));
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="/api/players/{playerId}/blocked-games: EMR79: Retrieve Blocked Games" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchBlockedGames: GET /pfi/exclusions/players/{playerId}/ - UPAM" enabled="true">
              <stringProp name="HTTPSampler.path">/pfi/exclusions/players/${c_playerId}/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="/api/players/{playerId}/limits: EMR-88: Retrieve Spend Limits" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchSpendLimits: GET /limits/players/{playerId} - UPAM" enabled="true">
              <stringProp name="HTTPSampler.path">/pfi/limits/players/${c_playerId}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="filter%5Bstatus%5D" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">active%2Cplanned</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">filter%5Bstatus%5D</stringProp>
                  </elementProp>
                  <elementProp name="expand" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">counters</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">expand</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="/api/players/{playerId}/ede: EMR-61: Fetch EDE Tickets and Results" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchCurrentDraw: GET /draw-history-api/v1/games/{gameId}/draws/next - PDS" enabled="true">
              <stringProp name="HTTPSampler.domain">${p_basePDSUrl}</stringProp>
              <stringProp name="HTTPSampler.path">/draw-history-api/v1/games/${p_gameId}/draws/next?by=SELL_END_DATE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="c_drawNumber" enabled="true">
                <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                <stringProp name="BoundaryExtractor.refname">c_drawNumber</stringProp>
                <stringProp name="BoundaryExtractor.lboundary">&quot;drawNo&quot;:</stringProp>
                <stringProp name="BoundaryExtractor.rboundary">,&quot;</stringProp>
                <stringProp name="BoundaryExtractor.default"></stringProp>
                <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                <stringProp name="BoundaryExtractor.match_number"></stringProp>
              </BoundaryExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchCurrentDraw: GET /draw-history-api/v1/games/{gameId}/draws/{drawNumber} - PDS" enabled="true">
              <stringProp name="HTTPSampler.domain">${p_basePDSUrl}</stringProp>
              <stringProp name="HTTPSampler.path">/draw-history-api/v1/games/${p_gameId}/draws/${c_drawNumber}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchWinningsToProcess: GET /pfi/players/{playerId}/winnings-to-process - UPAM" enabled="true">
              <stringProp name="HTTPSampler.path">/pfi/players/${c_playerId}/winnings-to-process</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="c_winningId" enabled="false">
                <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                <stringProp name="BoundaryExtractor.refname">c_winningId</stringProp>
                <stringProp name="BoundaryExtractor.lboundary">&quot;id&quot;:&quot;</stringProp>
                <stringProp name="BoundaryExtractor.rboundary">&quot;,</stringProp>
                <stringProp name="BoundaryExtractor.default"></stringProp>
                <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                <stringProp name="BoundaryExtractor.match_number"></stringProp>
              </BoundaryExtractor>
              <hashTree/>
              <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="c_winningId" enabled="true">
                <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                <stringProp name="BoundaryExtractor.refname">c_winningId</stringProp>
                <stringProp name="BoundaryExtractor.lboundary">&quot;winningId&quot;:&quot;</stringProp>
                <stringProp name="BoundaryExtractor.rboundary">&quot;,&quot;</stringProp>
                <stringProp name="BoundaryExtractor.default"></stringProp>
                <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                <stringProp name="BoundaryExtractor.match_number"></stringProp>
              </BoundaryExtractor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

def winningsId = response.data.findAll { it.attributes.status == &quot;pending-player-ack&quot; &amp;&amp; it.attributes.acknowledged == false }*.id


// Select the 2nd ID (index 1 since Groovy lists are 0-based)
vars.put(&quot;c_winningsId&quot;, winningsId.size() &gt; 0 ? winningsId[0] : null);
</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchWinningsToProcess(ID): GET /pfi/players/{playerId}/winnings-to-process/{winningId} - UPAM" enabled="true">
              <stringProp name="HTTPSampler.path">/pfi/players/${c_playerId}/winnings-to-process/${c_winningId}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;acknowledged&quot;: true&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchGameHistory: GET /pfi/players/{playerId}/game-history - UPAM" enabled="true">
              <stringProp name="HTTPSampler.path">/pfi/players/${c_playerId}/game-history</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="filter%5Bfrom%5D" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2024-12-28</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">filter%5Bfrom%5D</stringProp>
                  </elementProp>
                  <elementProp name="filter%5Bto%5D" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2025-02-24</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">filter%5Bto%5D</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="false">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

//vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
vars.put(&quot;c_wagerId&quot;, response.data[0].parentExternalId.toString());


//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; WAGER ID: &quot; + vars.get(&quot;c_wagerId&quot;));
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="c_wagerId" enabled="true">
                <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                <stringProp name="BoundaryExtractor.refname">c_wagerId</stringProp>
                <stringProp name="BoundaryExtractor.lboundary">&quot;parentExternalId&quot;:&quot;</stringProp>
                <stringProp name="BoundaryExtractor.rboundary">&quot;,</stringProp>
                <stringProp name="BoundaryExtractor.default"></stringProp>
                <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                <stringProp name="BoundaryExtractor.match_number"></stringProp>
              </BoundaryExtractor>
              <hashTree/>
              <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="c_gameHistoryId" enabled="true">
                <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                <stringProp name="BoundaryExtractor.refname">c_gameHistoryId</stringProp>
                <stringProp name="BoundaryExtractor.lboundary">&quot;id&quot;:&quot;</stringProp>
                <stringProp name="BoundaryExtractor.rboundary">&quot;,&quot;</stringProp>
                <stringProp name="BoundaryExtractor.default"></stringProp>
                <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                <stringProp name="BoundaryExtractor.match_number">0</stringProp>
              </BoundaryExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchWagerHistory: POST /wager-history-api/v1/wagers/get-many - PDS" enabled="true">
              <stringProp name="HTTPSampler.domain">${p_basePDSUrl}</stringProp>
              <stringProp name="HTTPSampler.path">/wager-history-api/v1/wagers/get-many</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
  &quot;${c_wagerId}&quot;&#xd;
]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.services.FileServer;

String path=FileServer.getFileServer().getBaseDir();

f = new FileOutputStream(&quot;C://SGI_Performance//sg_perf_test//data//result_player_details_login.csv&quot;,true);
p = new PrintStream(f); 

iteration = vars.getIteration();
p_playerLogin = vars.get(&quot;p_playerLogin&quot;);
c_playerId = vars.get(&quot;c_playerId&quot;);
c_walletBalance = vars.get(&quot;c_walletBalance&quot;);
threadnum = ${__threadNum};
datetime = &quot;${__time(yyyy_MM_dd_HH_mm_ss)}&quot;;

this.interpreter.setOut(p); 
//p.println(p_playerLogin+ &quot;,&quot; +c_walletType+ &quot;,&quot; +c_walletBalance+ &quot;,&quot;+threadnum+ &quot;,&quot; +iteration);
p.println(&quot;Player Login: &quot; +p_playerLogin+ &quot;, Player ID: &quot; +c_playerId+ &quot;, Wallet Balance: &quot; +c_walletBalance+ &quot;, Thread Number: &quot;+threadnum+ &quot;, Iteration Number: &quot; +iteration+&quot;, Time: &quot;+datetime);

f.close();
//log.info(&quot;LOGIN FAILED, PLAYER: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + ${__threadNum}+ &quot;, Iteration: &quot; +iteration);
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TopUp Wallet" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="/api/players/{playerId}/wallets/top-ups/credit-cards: EMR-95: Top Up Wallet" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchPaymentMethods: GET /pfi/players/{playerId}/payment-methods - UPAM" enabled="true">
              <stringProp name="HTTPSampler.path">/pfi/players/${c_playerId}/payment-methods</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

// Collect IDs for objects with type &quot;creditCard&quot;
def creditCardIds = response.data.findAll { it.attributes.type == &quot;creditCard&quot; &amp;&amp; it.attributes.isValid == true }*.id

// Select the 2nd ID (index 1 since Groovy lists are 0-based)
vars.put(&quot;c_paymentMethodId&quot;, creditCardIds.size() &gt; 0 ? creditCardIds[0] : null);

//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; PAYMENT METHOD ID: &quot; + vars.get(&quot;c_paymentMethodId&quot;));
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deposits: POST /pfi/players/{playerId}/deposits - UPAM" enabled="true">
              <stringProp name="HTTPSampler.path">/pfi/players/${c_playerId}/deposits</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;deposit&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;amount&quot;: ${p_adjustmentAmount},&#xd;
      &quot;currency&quot;: &quot;NZD&quot;,&#xd;
      &quot;paymentMethodId&quot;: &quot;${c_paymentMethodId}&quot;,&#xd;
      &quot;ledger&quot;: &quot;real-money&quot;,&#xd;
      &quot;channel&quot;: &quot;DESKTOP&quot;,&#xd;
      &quot;capture&quot;: true,&#xd;
      &quot;acceptRedirectUrl&quot;: &quot;http://frontend/accept&quot;,&#xd;
      &quot;cancelRedirectUrl&quot;: &quot;http://frontend/cancel&quot;,&#xd;
      &quot;3dsecure&quot;: true&#xd;
    }&#xd;
  }&#xd;
}&#xd;
 </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

//vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
vars.put(&quot;c_transactionId&quot;, response.data.id.toString());

//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; TOP UP ID: &quot; + vars.get(&quot;c_topUpId&quot;));
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="sessionId2" enabled="false">
                <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                <stringProp name="BoundaryExtractor.refname">c_sessionId2</stringProp>
                <stringProp name="BoundaryExtractor.lboundary">&quot;id&quot;:&quot;</stringProp>
                <stringProp name="BoundaryExtractor.rboundary">&quot;,</stringProp>
                <stringProp name="BoundaryExtractor.default"></stringProp>
                <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                <stringProp name="BoundaryExtractor.match_number">1</stringProp>
              </BoundaryExtractor>
              <hashTree/>
              <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="redirectURL2" enabled="false">
                <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                <stringProp name="BoundaryExtractor.refname">c_redirectURL2</stringProp>
                <stringProp name="BoundaryExtractor.lboundary">&quot;urlToRedirect&quot;:&quot;</stringProp>
                <stringProp name="BoundaryExtractor.rboundary">&quot;</stringProp>
                <stringProp name="BoundaryExtractor.default"></stringProp>
                <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                <stringProp name="BoundaryExtractor.match_number">1</stringProp>
              </BoundaryExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Get Favourites" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="/api/players/{playerId}/favourites: EMR-59: Fetch Favourites" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchFavourites: GET /pfi/profile/players/{playerId}/favorite-bets - UPAM" enabled="true">
              <stringProp name="HTTPSampler.path">/pfi/profile/players/${c_playerId}/favorite-bets</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Get Current Draw" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="/api/draws/{gamename}: EMR-230: Fetch Current Draw" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchCurrentDraw: GET /draw-history-api/v1/games/{gameId}/draws/next - PDS" enabled="true">
              <stringProp name="HTTPSampler.domain">${p_basePDSUrl}</stringProp>
              <stringProp name="HTTPSampler.path">/draw-history-api/v1/games/${p_gameId}/draws/next?by=SELL_END_DATE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="c_drawNumber" enabled="true">
                <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                <stringProp name="BoundaryExtractor.refname">c_drawNumber</stringProp>
                <stringProp name="BoundaryExtractor.lboundary">&quot;drawNo&quot;:</stringProp>
                <stringProp name="BoundaryExtractor.rboundary">,&quot;</stringProp>
                <stringProp name="BoundaryExtractor.default"></stringProp>
                <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                <stringProp name="BoundaryExtractor.match_number"></stringProp>
              </BoundaryExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Buy Wager" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="/api/players/{playerId}/wagers: EMR-51: Create Wager" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchWalletBalance: GET /pfi/wallets/{playerId} - UPAM" enabled="true">
              <stringProp name="HTTPSampler.path">/pfi/wallets/${c_playerId}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

//vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
vars.put(&quot;c_walletType&quot;, response.data.attributes.balances[2].id.toString());
vars.put(&quot;c_walletBalance&quot;, response.data.attributes.balances[2].available.toString());

//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; WALLET_TYPE: &quot; + vars.get(&quot;c_walletType&quot;) + &quot; WALLET_BALANCE: &quot; + vars.get(&quot;c_walletBalance&quot;));
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RegisterWager(LottoPBStrike): POST /rcs-dge-wager/v1/wagers - DGE" enabled="true">
              <stringProp name="HTTPSampler.domain">${p_baseRCSUrl}</stringProp>
              <stringProp name="HTTPSampler.path">/rcs-dge-wager/v1/wagers</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;playerData&quot;: {&#xd;
    &quot;playerId&quot;: &quot;${c_playerId}&quot;&#xd;
  },&#xd;
  &quot;wagerRequestData&quot;: {&#xd;
    &quot;playMethodNo&quot;: 2,&#xd;
    &quot;wagerTypeNo&quot;: 14,&#xd;
    &quot;wagerDefNo&quot;: 72,&#xd;
    &quot;betDataReq&quot;: [&#xd;
      {&#xd;
        &quot;gameId&quot;: 20,&#xd;
        &quot;drawCount&quot;: 1,&#xd;
        &quot;drawDayNo&quot;: 72,&#xd;
        &quot;panels&quot;: [&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          }&#xd;
        ]&#xd;
      },&#xd;
      {&#xd;
        &quot;gameId&quot;: 12,&#xd;
        &quot;drawCount&quot;: 1,&#xd;
        &quot;drawDayNo&quot;: 72,&#xd;
        &quot;panels&quot;: [&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          }&#xd;
        ]&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-correlation-id</stringProp>
                    <stringProp name="Header.value">${p_guid}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-sg-device-type</stringProp>
                    <stringProp name="Header.value">7</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-sg-device-user-id</stringProp>
                    <stringProp name="Header.value">10076</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-sg-jurisdiction-id</stringProp>
                    <stringProp name="Header.value">54</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-sg-pos-id</stringProp>
                    <stringProp name="Header.value">525802</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-sg-sales-channel</stringProp>
                    <stringProp name="Header.value">10</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-sg-pos-device-socket-id</stringProp>
                    <stringProp name="Header.value">52580200</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="false">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

//vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
//vars.put(&quot;c_wagerPrice&quot;, response.wagerResponseData[0].wagerPrice.toString());
vars.put(&quot;c_wagerId&quot;, response.wagerResponseData[0].wagerId.toString());


//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; WAGER (DIP: Triple) PRICE: &quot; + vars.get(&quot;c_wagerPrice&quot;));
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.services.FileServer;

String path=FileServer.getFileServer().getBaseDir();

f = new FileOutputStream(&quot;C://SGI_Performance//sg_perf_test//data//result_player_details_wagers.csv&quot;,true);
p = new PrintStream(f); 

iteration = vars.getIteration();
c_playerId = vars.get(&quot;c_playerId&quot;);
p_posId = vars.get(&quot;p_posId&quot;);
c_wagerId = vars.get(&quot;c_wagerId&quot;);
threadnum = ${__threadNum};
datetime = &quot;${__time(yyyy_MM_dd_HH_mm_ss)}&quot;;

this.interpreter.setOut(p); 
//p.println(p_playerLogin+ &quot;,&quot; +c_walletType+ &quot;,&quot; +c_walletBalance+ &quot;,&quot;+threadnum+ &quot;,&quot; +iteration);
p.println(&quot;Player ID: &quot; +c_playerId+ &quot;, POS ID: &quot; +p_posId+ &quot;, Wager ID: &quot; +c_wagerId+ &quot;, Thread Number: &quot;+threadnum+ &quot;, Iteration Number: &quot; +iteration+&quot;, Time: &quot;+datetime);

f.close();
//log.info(&quot;LOGIN FAILED, PLAYER: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + ${__threadNum}+ &quot;, Iteration: &quot; +iteration);
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="/api/players/{playerId}/limits: EMR-88: Retrieve Spend Limits)" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchSpendLimits: GET /limits/players/{playerId} - UPAM" enabled="true">
              <stringProp name="HTTPSampler.path">/pfi/limits/players/${c_playerId}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="filter%5Bstatus%5D" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">active%2Cplanned</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">filter%5Bstatus%5D</stringProp>
                  </elementProp>
                  <elementProp name="expand" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">counters</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">expand</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Check Results" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="/api/draws/{gamename}: EMR-230: Fetch Current Draw" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchCurrentDraw: GET /draw-history-api/v1/games/{gameId}/draws/next - PDS" enabled="true">
              <stringProp name="HTTPSampler.domain">${p_basePDSUrl}</stringProp>
              <stringProp name="HTTPSampler.path">/draw-history-api/v1/games/${p_gameId}/draws/next?by=SELL_END_DATE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="c_drawNumber" enabled="true">
                <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                <stringProp name="BoundaryExtractor.refname">c_drawNumber</stringProp>
                <stringProp name="BoundaryExtractor.lboundary">&quot;drawNo&quot;:</stringProp>
                <stringProp name="BoundaryExtractor.rboundary">,&quot;</stringProp>
                <stringProp name="BoundaryExtractor.default"></stringProp>
                <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                <stringProp name="BoundaryExtractor.match_number"></stringProp>
              </BoundaryExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="/api/players/{playerId}/tickets?game: EMR-64: Fetch Ticket History" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchWinningsToProcess: GET /pfi/players/{playerId}/winnings-to-process - UPAM" enabled="true">
              <stringProp name="HTTPSampler.path">/pfi/players/${c_playerId}/winnings-to-process</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="c_winningId" enabled="false">
                <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                <stringProp name="BoundaryExtractor.refname">c_winningId</stringProp>
                <stringProp name="BoundaryExtractor.lboundary">&quot;id&quot;:&quot;</stringProp>
                <stringProp name="BoundaryExtractor.rboundary">&quot;,</stringProp>
                <stringProp name="BoundaryExtractor.default"></stringProp>
                <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                <stringProp name="BoundaryExtractor.match_number"></stringProp>
              </BoundaryExtractor>
              <hashTree/>
              <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="c_winningId" enabled="true">
                <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                <stringProp name="BoundaryExtractor.refname">c_winningId</stringProp>
                <stringProp name="BoundaryExtractor.lboundary">&quot;winningId&quot;:&quot;</stringProp>
                <stringProp name="BoundaryExtractor.rboundary">&quot;,&quot;</stringProp>
                <stringProp name="BoundaryExtractor.default"></stringProp>
                <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                <stringProp name="BoundaryExtractor.match_number"></stringProp>
              </BoundaryExtractor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

def winningsId = response.data.findAll { it.attributes.status == &quot;pending-player-ack&quot; &amp;&amp; it.attributes.acknowledged == false }*.id


// Select the 2nd ID (index 1 since Groovy lists are 0-based)
vars.put(&quot;c_winningsId&quot;, winningsId.size() &gt; 0 ? winningsId[0] : null);
</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchGameHistory: GET /pfi/players/{playerId}/game-history - UPAM" enabled="true">
              <stringProp name="HTTPSampler.path">/pfi/players/${c_playerId}/game-history</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="filter%5Bfrom%5D" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2024-12-28</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">filter%5Bfrom%5D</stringProp>
                  </elementProp>
                  <elementProp name="filter%5Bto%5D" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2025-02-24</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">filter%5Bto%5D</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="false">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

//vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
vars.put(&quot;c_wagerId&quot;, response.data[0].parentExternalId.toString());


//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; WAGER ID: &quot; + vars.get(&quot;c_wagerId&quot;));
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="c_wagerId" enabled="true">
                <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                <stringProp name="BoundaryExtractor.refname">c_wagerId</stringProp>
                <stringProp name="BoundaryExtractor.lboundary">&quot;parentExternalId&quot;:&quot;</stringProp>
                <stringProp name="BoundaryExtractor.rboundary">&quot;,</stringProp>
                <stringProp name="BoundaryExtractor.default"></stringProp>
                <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                <stringProp name="BoundaryExtractor.match_number"></stringProp>
              </BoundaryExtractor>
              <hashTree/>
              <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="c_gameHistoryId" enabled="true">
                <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                <stringProp name="BoundaryExtractor.refname">c_gameHistoryId</stringProp>
                <stringProp name="BoundaryExtractor.lboundary">&quot;id&quot;:&quot;</stringProp>
                <stringProp name="BoundaryExtractor.rboundary">&quot;,&quot;</stringProp>
                <stringProp name="BoundaryExtractor.default"></stringProp>
                <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                <stringProp name="BoundaryExtractor.match_number">0</stringProp>
              </BoundaryExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchCurrentDraw: GET /draw-history-api/v1/games/{gameId}/draws/next - PDS" enabled="true">
              <stringProp name="HTTPSampler.domain">${p_basePDSUrl}</stringProp>
              <stringProp name="HTTPSampler.path">/draw-history-api/v1/games/${p_gameId}/draws/next?by=SELL_END_DATE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="c_drawNumber" enabled="true">
                <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                <stringProp name="BoundaryExtractor.refname">c_drawNumber</stringProp>
                <stringProp name="BoundaryExtractor.lboundary">&quot;drawNo&quot;:</stringProp>
                <stringProp name="BoundaryExtractor.rboundary">,&quot;</stringProp>
                <stringProp name="BoundaryExtractor.default"></stringProp>
                <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                <stringProp name="BoundaryExtractor.match_number"></stringProp>
              </BoundaryExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchWagerHistory: POST /wager-history-api/v1/wagers/get-many - PDS" enabled="true">
              <stringProp name="HTTPSampler.domain">${p_basePDSUrl}</stringProp>
              <stringProp name="HTTPSampler.path">/wager-history-api/v1/wagers/get-many</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
  &quot;${c_wagerId}&quot;&#xd;
]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.services.FileServer;

String path=FileServer.getFileServer().getBaseDir();

f = new FileOutputStream(&quot;C://SGI_Performance//sg_perf_test//data//result_player_details_login.csv&quot;,true);
p = new PrintStream(f); 

iteration = vars.getIteration();
p_playerLogin = vars.get(&quot;p_playerLogin&quot;);
c_playerId = vars.get(&quot;c_playerId&quot;);
c_walletBalance = vars.get(&quot;c_walletBalance&quot;);
threadnum = ${__threadNum};
datetime = &quot;${__time(yyyy_MM_dd_HH_mm_ss)}&quot;;

this.interpreter.setOut(p); 
//p.println(p_playerLogin+ &quot;,&quot; +c_walletType+ &quot;,&quot; +c_walletBalance+ &quot;,&quot;+threadnum+ &quot;,&quot; +iteration);
p.println(&quot;Player Login: &quot; +p_playerLogin+ &quot;, Player ID: &quot; +c_playerId+ &quot;, Wallet Balance: &quot; +c_walletBalance+ &quot;, Thread Number: &quot;+threadnum+ &quot;, Iteration Number: &quot; +iteration+&quot;, Time: &quot;+datetime);

f.close();
//log.info(&quot;LOGIN FAILED, PLAYER: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + ${__threadNum}+ &quot;, Iteration: &quot; +iteration);
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="/api/players/{playerId}/ede: EMR-61: Fetch EDE Tickets and Results" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchCurrentDraw: GET /draw-history-api/v1/games/{gameId}/draws/{drawNumber} - PDS" enabled="true">
              <stringProp name="HTTPSampler.domain">${p_basePDSUrl}</stringProp>
              <stringProp name="HTTPSampler.path">/draw-history-api/v1/games/${p_gameId}/draws/${c_drawNumber}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchWinningsToProcess: GET /pfi/players/{playerId}/winnings-to-process - UPAM" enabled="true">
              <stringProp name="HTTPSampler.path">/pfi/players/${c_playerId}/winnings-to-process</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="c_winningId" enabled="false">
                <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                <stringProp name="BoundaryExtractor.refname">c_winningId</stringProp>
                <stringProp name="BoundaryExtractor.lboundary">&quot;id&quot;:&quot;</stringProp>
                <stringProp name="BoundaryExtractor.rboundary">&quot;,</stringProp>
                <stringProp name="BoundaryExtractor.default"></stringProp>
                <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                <stringProp name="BoundaryExtractor.match_number"></stringProp>
              </BoundaryExtractor>
              <hashTree/>
              <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="c_winningId" enabled="true">
                <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                <stringProp name="BoundaryExtractor.refname">c_winningId</stringProp>
                <stringProp name="BoundaryExtractor.lboundary">&quot;winningId&quot;:&quot;</stringProp>
                <stringProp name="BoundaryExtractor.rboundary">&quot;,&quot;</stringProp>
                <stringProp name="BoundaryExtractor.default"></stringProp>
                <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                <stringProp name="BoundaryExtractor.match_number"></stringProp>
              </BoundaryExtractor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

def winningsId = response.data.findAll { it.attributes.status == &quot;pending-player-ack&quot; &amp;&amp; it.attributes.acknowledged == false }*.id


// Select the 2nd ID (index 1 since Groovy lists are 0-based)
vars.put(&quot;c_winningsId&quot;, winningsId.size() &gt; 0 ? winningsId[0] : null);
</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchWinningsToProcess(ID): GET /pfi/players/{playerId}/winnings-to-process/{winningId} - UPAM" enabled="true">
              <stringProp name="HTTPSampler.path">/pfi/players/${c_playerId}/winnings-to-process/${c_winningId}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;acknowledged&quot;: true&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchGameHistory: GET /pfi/players/{playerId}/game-history - UPAM" enabled="true">
              <stringProp name="HTTPSampler.path">/pfi/players/${c_playerId}/game-history</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="filter%5Bfrom%5D" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2024-12-28</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">filter%5Bfrom%5D</stringProp>
                  </elementProp>
                  <elementProp name="filter%5Bto%5D" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2025-02-24</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">filter%5Bto%5D</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="false">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

//vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
vars.put(&quot;c_wagerId&quot;, response.data[0].parentExternalId.toString());


//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; WAGER ID: &quot; + vars.get(&quot;c_wagerId&quot;));
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="c_wagerId" enabled="true">
                <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                <stringProp name="BoundaryExtractor.refname">c_wagerId</stringProp>
                <stringProp name="BoundaryExtractor.lboundary">&quot;parentExternalId&quot;:&quot;</stringProp>
                <stringProp name="BoundaryExtractor.rboundary">&quot;,</stringProp>
                <stringProp name="BoundaryExtractor.default"></stringProp>
                <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                <stringProp name="BoundaryExtractor.match_number"></stringProp>
              </BoundaryExtractor>
              <hashTree/>
              <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="c_gameHistoryId" enabled="true">
                <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                <stringProp name="BoundaryExtractor.refname">c_gameHistoryId</stringProp>
                <stringProp name="BoundaryExtractor.lboundary">&quot;id&quot;:&quot;</stringProp>
                <stringProp name="BoundaryExtractor.rboundary">&quot;,&quot;</stringProp>
                <stringProp name="BoundaryExtractor.default"></stringProp>
                <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                <stringProp name="BoundaryExtractor.match_number">0</stringProp>
              </BoundaryExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchWagerHistory: POST /wager-history-api/v1/wagers/get-many - PDS" enabled="true">
              <stringProp name="HTTPSampler.domain">${p_basePDSUrl}</stringProp>
              <stringProp name="HTTPSampler.path">/wager-history-api/v1/wagers/get-many</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
  &quot;${c_wagerId}&quot;&#xd;
]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.services.FileServer;

String path=FileServer.getFileServer().getBaseDir();

f = new FileOutputStream(&quot;C://SGI_Performance//sg_perf_test//data//result_player_details_login.csv&quot;,true);
p = new PrintStream(f); 

iteration = vars.getIteration();
p_playerLogin = vars.get(&quot;p_playerLogin&quot;);
c_playerId = vars.get(&quot;c_playerId&quot;);
c_walletBalance = vars.get(&quot;c_walletBalance&quot;);
threadnum = ${__threadNum};
datetime = &quot;${__time(yyyy_MM_dd_HH_mm_ss)}&quot;;

this.interpreter.setOut(p); 
//p.println(p_playerLogin+ &quot;,&quot; +c_walletType+ &quot;,&quot; +c_walletBalance+ &quot;,&quot;+threadnum+ &quot;,&quot; +iteration);
p.println(&quot;Player Login: &quot; +p_playerLogin+ &quot;, Player ID: &quot; +c_playerId+ &quot;, Wallet Balance: &quot; +c_walletBalance+ &quot;, Thread Number: &quot;+threadnum+ &quot;, Iteration Number: &quot; +iteration+&quot;, Time: &quot;+datetime);

f.close();
//log.info(&quot;LOGIN FAILED, PLAYER: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + ${__threadNum}+ &quot;, Iteration: &quot; +iteration);
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Scan Ticket" enabled="false">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="/api/tickets/{serialNumber}: EMR-91: Scan Ticket" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchPrizeInquiry: PATCH /rcs-ige-prize-payout/v1/tickets/{ticketNo}/prize-inquiry - IGE" enabled="true">
              <stringProp name="HTTPSampler.domain">${p_baseIGEUrl}</stringProp>
              <stringProp name="HTTPSampler.path">/rcs-ige-prize-payout/v1/tickets/5400003178800900106946386533/prize-inquiry</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;validationData&quot;: &quot;80222465&quot;,&#xd;
  &quot;isScanned&quot;: true,&#xd;
  &quot;scanned&quot;: true&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.services.FileServer;

String path=FileServer.getFileServer().getBaseDir();

f = new FileOutputStream(&quot;C://SGI_Performance//sg_perf_test//data//result_player_details_login.csv&quot;,true);
p = new PrintStream(f); 

iteration = vars.getIteration();
p_playerLogin = vars.get(&quot;p_playerLogin&quot;);
c_playerId = vars.get(&quot;c_playerId&quot;);
c_walletBalance = vars.get(&quot;c_walletBalance&quot;);
threadnum = ${__threadNum};
datetime = &quot;${__time(yyyy_MM_dd_HH_mm_ss)}&quot;;

this.interpreter.setOut(p); 
//p.println(p_playerLogin+ &quot;,&quot; +c_walletType+ &quot;,&quot; +c_walletBalance+ &quot;,&quot;+threadnum+ &quot;,&quot; +iteration);
p.println(&quot;Player Login: &quot; +p_playerLogin+ &quot;, Player ID: &quot; +c_playerId+ &quot;, Wallet Balance: &quot; +c_walletBalance+ &quot;, Thread Number: &quot;+threadnum+ &quot;, Iteration Number: &quot; +iteration+&quot;, Time: &quot;+datetime);

f.close();
//log.info(&quot;LOGIN FAILED, PLAYER: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + ${__threadNum}+ &quot;, Iteration: &quot; +iteration);
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchWagerHistory: GET /wager-history-api/v1/wagers?wagerIds={serialNumber}  - PDS" enabled="true">
              <stringProp name="HTTPSampler.domain">${p_basePDSUrl}</stringProp>
              <stringProp name="HTTPSampler.path">/wager-history-api/v1/wagers?wagerIds=5400003178800900106946386533</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.services.FileServer;

String path=FileServer.getFileServer().getBaseDir();

f = new FileOutputStream(&quot;C://SGI_Performance//sg_perf_test//data//result_player_details_login.csv&quot;,true);
p = new PrintStream(f); 

iteration = vars.getIteration();
p_playerLogin = vars.get(&quot;p_playerLogin&quot;);
c_playerId = vars.get(&quot;c_playerId&quot;);
c_walletBalance = vars.get(&quot;c_walletBalance&quot;);
threadnum = ${__threadNum};
datetime = &quot;${__time(yyyy_MM_dd_HH_mm_ss)}&quot;;

this.interpreter.setOut(p); 
//p.println(p_playerLogin+ &quot;,&quot; +c_walletType+ &quot;,&quot; +c_walletBalance+ &quot;,&quot;+threadnum+ &quot;,&quot; +iteration);
p.println(&quot;Player Login: &quot; +p_playerLogin+ &quot;, Player ID: &quot; +c_playerId+ &quot;, Wallet Balance: &quot; +c_walletBalance+ &quot;, Thread Number: &quot;+threadnum+ &quot;, Iteration Number: &quot; +iteration+&quot;, Time: &quot;+datetime);

f.close();
//log.info(&quot;LOGIN FAILED, PLAYER: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + ${__threadNum}+ &quot;, Iteration: &quot; +iteration);
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RegisterWager(LottoPBStrike): POST /rcs-dge-wager/v1/wagers - DGE" enabled="false">
          <stringProp name="HTTPSampler.domain">${p_baseRCSUrl}</stringProp>
          <stringProp name="HTTPSampler.path">/rcs-dge-wager/v1/wagers</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;playerData&quot;: {&#xd;
    &quot;playerId&quot;: &quot;${c_playerId}&quot;&#xd;
  },&#xd;
  &quot;wagerRequestData&quot;: {&#xd;
    &quot;playMethodNo&quot;: 2,&#xd;
    &quot;wagerTypeNo&quot;: 14,&#xd;
    &quot;wagerDefNo&quot;: 72,&#xd;
    &quot;betDataReq&quot;: [&#xd;
      {&#xd;
        &quot;gameId&quot;: 20,&#xd;
        &quot;drawCount&quot;: 1,&#xd;
        &quot;drawDayNo&quot;: 72,&#xd;
        &quot;panels&quot;: [&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },          &#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 101,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          }&#xd;
        ]&#xd;
      },&#xd;
      {&#xd;
        &quot;gameId&quot;: 12,&#xd;
        &quot;drawCount&quot;: 1,&#xd;
        &quot;drawDayNo&quot;: 72,&#xd;
        &quot;panels&quot;: [&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          }&#xd;
        ]&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-correlation-id</stringProp>
                <stringProp name="Header.value">${p_guid}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-device-type</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-device-user-id</stringProp>
                <stringProp name="Header.value">10076</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-jurisdiction-id</stringProp>
                <stringProp name="Header.value">54</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-pos-id</stringProp>
                <stringProp name="Header.value">525802</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-sales-channel</stringProp>
                <stringProp name="Header.value">10</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-pos-device-socket-id</stringProp>
                <stringProp name="Header.value">52580200</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

//vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
//vars.put(&quot;c_wagerPrice&quot;, response.wagerResponseData[0].wagerPrice.toString());
vars.put(&quot;c_wagerId&quot;, response.wagerResponseData[0].wagerId.toString());


//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; WAGER (DIP: Triple) PRICE: &quot; + vars.get(&quot;c_wagerPrice&quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer;

String path=FileServer.getFileServer().getBaseDir();

f = new FileOutputStream(&quot;C://SGI_Performance//sg_perf_test//data//result_player_details_wagers.csv&quot;,true);
p = new PrintStream(f); 

iteration = vars.getIteration();
c_playerId = vars.get(&quot;c_playerId&quot;);
p_posId = vars.get(&quot;p_posId&quot;);
c_wagerId = vars.get(&quot;c_wagerId&quot;);
threadnum = ${__threadNum};
datetime = &quot;${__time(yyyy_MM_dd_HH_mm_ss)}&quot;;

this.interpreter.setOut(p); 
//p.println(p_playerLogin+ &quot;,&quot; +c_walletType+ &quot;,&quot; +c_walletBalance+ &quot;,&quot;+threadnum+ &quot;,&quot; +iteration);
p.println(&quot;Player ID: &quot; +c_playerId+ &quot;, POS ID: &quot; +p_posId+ &quot;, Wager ID: &quot; +c_wagerId+ &quot;, Thread Number: &quot;+threadnum+ &quot;, Iteration Number: &quot; +iteration+&quot;, Time: &quot;+datetime);

f.close();
//log.info(&quot;LOGIN FAILED, PLAYER: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + ${__threadNum}+ &quot;, Iteration: &quot; +iteration);
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RegisterWager(LottoPB): POST /rcs-dge-wager/v1/wagers - DGE" enabled="false">
          <stringProp name="HTTPSampler.domain">${p_baseRCSUrl}</stringProp>
          <stringProp name="HTTPSampler.path">/rcs-dge-wager/v1/wagers</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;playerData&quot;: {&#xd;
    &quot;playerId&quot;: &quot;${c_playerId}&quot;&#xd;
  },&#xd;
  &quot;wagerRequestData&quot;: {&#xd;
    &quot;playMethodNo&quot;: 2,&#xd;
    &quot;wagerTypeNo&quot;: 14,&#xd;
    &quot;wagerDefNo&quot;: 21,&#xd;
    &quot;betDataReq&quot;: [&#xd;
      {&#xd;
        &quot;gameId&quot;: 20,&#xd;
        &quot;drawCount&quot;: 1,&#xd;
        &quot;drawDayNo&quot;: 8,&#xd;
        &quot;panels&quot;: [&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          }&#xd;
        ]&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-correlation-id</stringProp>
                <stringProp name="Header.value">${p_guid}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-device-type</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-device-user-id</stringProp>
                <stringProp name="Header.value">10076</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-jurisdiction-id</stringProp>
                <stringProp name="Header.value">54</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-pos-id</stringProp>
                <stringProp name="Header.value">525802</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-sales-channel</stringProp>
                <stringProp name="Header.value">10</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-pos-device-socket-id</stringProp>
                <stringProp name="Header.value">52580200</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

//vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
//vars.put(&quot;c_wagerPrice&quot;, response.wagerResponseData[0].wagerPrice.toString());
vars.put(&quot;c_wagerId&quot;, response.wagerResponseData[0].wagerId.toString());


//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; WAGER (DIP: Triple) PRICE: &quot; + vars.get(&quot;c_wagerPrice&quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer;

String path=FileServer.getFileServer().getBaseDir();

f = new FileOutputStream(&quot;C://SGI_Performance//sg_perf_test//data//result_player_details_wagers.csv&quot;,true);
p = new PrintStream(f); 

iteration = vars.getIteration();
c_playerId = vars.get(&quot;c_playerId&quot;);
p_posId = vars.get(&quot;p_posId&quot;);
c_wagerId = vars.get(&quot;c_wagerId&quot;);
threadnum = ${__threadNum};
datetime = &quot;${__time(yyyy_MM_dd_HH_mm_ss)}&quot;;

this.interpreter.setOut(p); 
//p.println(p_playerLogin+ &quot;,&quot; +c_walletType+ &quot;,&quot; +c_walletBalance+ &quot;,&quot;+threadnum+ &quot;,&quot; +iteration);
p.println(&quot;Player ID: &quot; +c_playerId+ &quot;, POS ID: &quot; +p_posId+ &quot;, Wager ID: &quot; +c_wagerId+ &quot;, Thread Number: &quot;+threadnum+ &quot;, Iteration Number: &quot; +iteration+&quot;, Time: &quot;+datetime);

f.close();
//log.info(&quot;LOGIN FAILED, PLAYER: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + ${__threadNum}+ &quot;, Iteration: &quot; +iteration);
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RegisterWager(Strike): POST /rcs-dge-wager/v1/wagers - DGE" enabled="false">
          <stringProp name="HTTPSampler.domain">${p_baseRCSUrl}</stringProp>
          <stringProp name="HTTPSampler.path">/rcs-dge-wager/v1/wagers</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;playerData&quot;: {&#xd;
    &quot;playerId&quot;: &quot;${c_playerId}&quot;&#xd;
  },&#xd;
  &quot;wagerRequestData&quot;: {&#xd;
    &quot;playMethodNo&quot;: 2,&#xd;
    &quot;wagerTypeNo&quot;: 14,&#xd;
    &quot;wagerDefNo&quot;: 14,&#xd;
    &quot;betDataReq&quot;: [&#xd;
      {&#xd;
        &quot;gameId&quot;: 12,&#xd;
        &quot;drawCount&quot;: 1,&#xd;
        &quot;drawDayNo&quot;: 8,&#xd;
        &quot;panels&quot;: [&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          },&#xd;
          {&#xd;
            &quot;playTypeNo&quot;: 1,&#xd;
            &quot;stakeMultiplier&quot;: 1,&#xd;
            &quot;isCorrected&quot;: false,&#xd;
            &quot;selectionEncoding&quot;: &quot;SS&quot;,&#xd;
            &quot;selection&quot;: &quot;&quot;&#xd;
          }&#xd;
        ]&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-correlation-id</stringProp>
                <stringProp name="Header.value">${p_guid}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-device-type</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-device-user-id</stringProp>
                <stringProp name="Header.value">10076</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-jurisdiction-id</stringProp>
                <stringProp name="Header.value">54</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-pos-id</stringProp>
                <stringProp name="Header.value">525802</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-sales-channel</stringProp>
                <stringProp name="Header.value">10</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-sg-pos-device-socket-id</stringProp>
                <stringProp name="Header.value">52580200</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

//vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
//vars.put(&quot;c_wagerPrice&quot;, response.wagerResponseData[0].wagerPrice.toString());
vars.put(&quot;c_wagerId&quot;, response.wagerResponseData[0].wagerId.toString());


//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; WAGER (DIP: Triple) PRICE: &quot; + vars.get(&quot;c_wagerPrice&quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer;

String path=FileServer.getFileServer().getBaseDir();

f = new FileOutputStream(&quot;C://SGI_Performance//sg_perf_test//data//result_player_details_wagers.csv&quot;,true);
p = new PrintStream(f); 

iteration = vars.getIteration();
c_playerId = vars.get(&quot;c_playerId&quot;);
p_posId = vars.get(&quot;p_posId&quot;);
c_wagerId = vars.get(&quot;c_wagerId&quot;);
threadnum = ${__threadNum};
datetime = &quot;${__time(yyyy_MM_dd_HH_mm_ss)}&quot;;

this.interpreter.setOut(p); 
//p.println(p_playerLogin+ &quot;,&quot; +c_walletType+ &quot;,&quot; +c_walletBalance+ &quot;,&quot;+threadnum+ &quot;,&quot; +iteration);
p.println(&quot;Player ID: &quot; +c_playerId+ &quot;, POS ID: &quot; +p_posId+ &quot;, Wager ID: &quot; +c_wagerId+ &quot;, Thread Number: &quot;+threadnum+ &quot;, Iteration Number: &quot; +iteration+&quot;, Time: &quot;+datetime);

f.close();
//log.info(&quot;LOGIN FAILED, PLAYER: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + ${__threadNum}+ &quot;, Iteration: &quot; +iteration);
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add A Win" enabled="false">
          <stringProp name="HTTPSampler.path">/gvi/v2/players/${c_playerId}/wagers/${c_gameHistoryId}/winnings?requestID=${__RandomString(10,abcdefghjiklmnopqrstuvwxyz,)}</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;state&quot;: &quot;PENDING&quot;,&#xd;
  &quot;type&quot;: &quot;CASH&quot;,&#xd;
  &quot;externalCheckedTime&quot;: &quot;2025-02-14&quot;,&#xd;
  &quot;description&quot;: &quot;test&quot;,&#xd;
  &quot;tier&quot;: &quot;tier-1&quot;,&#xd;
  &quot;transactions&quot;: [&#xd;
    {&#xd;
      &quot;amount&quot;: 5000,&#xd;
      &quot;channel&quot;: &quot;WEB&quot;,&#xd;
      &quot;externalCreatedTime&quot;: &quot;2025-02-14&quot;,&#xd;
      &quot;externalID&quot;: &quot;string&quot;,&#xd;
      &quot;subtype&quot;: &quot;string&quot;,&#xd;
      &quot;accountType&quot;: &quot;PRIMARY&quot;,&#xd;
      &quot;affiliate&quot;: &quot;string&quot;,&#xd;
      &quot;currency&quot;: &quot;NZD&quot;,&#xd;
      &quot;ip&quot;: &quot;127.0.0.1&quot;,&#xd;
      &quot;reason&quot;: &quot;test&quot;,&#xd;
      &quot;refTransactionID&quot;: &quot;string&quot;,&#xd;
      &quot;reserveMillis&quot;: 0,&#xd;
      &quot;retailerID&quot;: 0,&#xd;
      &quot;purchaseOrderId&quot;: &quot;string&quot;,&#xd;
      &quot;type&quot;: &quot;WIN&quot;&#xd;
    }&#xd;
  ]&#xd;
}&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">Bearer uJJPZmsjVaRAkGJPryrX6StckWYgy2F7vEAqt2Sr.${c_playerBearerToken}</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="x-sg-ss-service-authorization" elementType="Header">
                <stringProp name="Header.name">x-sg-ss-service-authorization</stringProp>
                <stringProp name="Header.value">gsdg</stringProp>
              </elementProp>
              <elementProp name="bypass-rg-validation" elementType="Header">
                <stringProp name="Header.name">bypass-rg-validation</stringProp>
                <stringProp name="Header.value">false</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="IKO" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">10</intProp>
        <longProp name="ThreadGroup.duration">300</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">20</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Test Data: Game Details" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">C:/SGI_Performance/sg_perf_test/data/player_game_details.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">p_iwgGameId,p_sgGameId</stringProp>
        </CSVDataSet>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Request Index Header" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">vars.put(&quot;p_guid&quot;, UUID.randomUUID().toString());
//log.info(&quot;Generated requestIndex for Session is: &quot; + vars.get(&quot;p_guid&quot;));</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login: POST /pfi/login - UPAM" enabled="true">
          <stringProp name="HTTPSampler.path">/pfi/login</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">player</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">type</stringProp>
              </elementProp>
              <elementProp name="email" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${p_playerLogin}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">email</stringProp>
              </elementProp>
              <elementProp name="password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${p_password}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">password</stringProp>
              </elementProp>
              <elementProp name="clientSecret" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${p_clientSecret}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">clientSecret</stringProp>
              </elementProp>
              <elementProp name="clientId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${p_clientId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">clientId</stringProp>
              </elementProp>
              <elementProp name="channel" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${p_channel}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">channel</stringProp>
              </elementProp>
              <elementProp name="ip" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${p_ip}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">ip</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

vars.put(&quot;c_playerToken&quot;, response.data.attributes.claim.toString());
vars.put(&quot;c_playerBearerToken&quot;, response.data.id.toString());
vars.put(&quot;c_playerId&quot;, response.data.attributes.playerId.toString());
vars.put(&quot;c_playerRefreshToken&quot;, response.data.attributes.refreshToken.toString());

//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; PLAYER_ID: &quot; + vars.get(&quot;c_playerId&quot;) + &quot; PLAYER_BEARER_TOKEN: &quot; + vars.get(&quot;c_playerBearerToken&quot;) + &quot; PLAYER_REFRESH_TOEKN: &quot; + vars.get(&quot;c_playerRefreshToken&quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch IKO Games: GET /hub/api/games?jurisdiction=LNZT2 - SGCH" enabled="true">
          <stringProp name="HTTPSampler.domain">${p_baseSGCHUrl}</stringProp>
          <stringProp name="HTTPSampler.path">/hub/api/games</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="jurisdiction" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">LNZT2</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">jurisdiction</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer J7bt1Sd5fvHXZ3aR0hRi31DelJzeiwhH0NLdfeff</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="c_ikoGameId" enabled="false">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">c_ikoGameId</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">&quot;gameID&quot;:&quot;</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">&quot;,&quot;</stringProp>
            <stringProp name="BoundaryExtractor.default"></stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">0</stringProp>
          </BoundaryExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Try SG Games: GET /hub/launch - SGCH" enabled="true">
          <stringProp name="HTTPSampler.domain">${p_baseSGCHUrl}</stringProp>
          <stringProp name="HTTPSampler.path">/hub/launch</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="operator" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">541</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">operator</stringProp>
              </elementProp>
              <elementProp name="game" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${p_sgGameId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">game</stringProp>
              </elementProp>
              <elementProp name="playmode" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">demo</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">playmode</stringProp>
              </elementProp>
              <elementProp name="player" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${c_playerId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">player</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${c_playerBearerToken}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">session</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer J7bt1Sd5fvHXZ3aR0hRi31DelJzeiwhH0NLdfeff</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

// Collect IDs for objects with type &quot;creditCard&quot;
def creditCardIds = response.data.findAll { it.attributes.type == &quot;creditCard&quot; &amp;&amp; it.attributes.isValid == true }*.id

// Select the 2nd ID (index 1 since Groovy lists are 0-based)
vars.put(&quot;c_paymentMethodId&quot;, creditCardIds.size() &gt; 0 ? creditCardIds[0] : null);

//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; PAYMENT METHOD ID: &quot; + vars.get(&quot;c_paymentMethodId&quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="c_text" enabled="false">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">c_text</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">&lt;title&gt;</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">&lt;/title&gt;</stringProp>
            <stringProp name="BoundaryExtractor.default"></stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Buy SG Games: GET /hub/launch - SGCH" enabled="true">
          <stringProp name="HTTPSampler.domain">${p_baseSGCHUrl}</stringProp>
          <stringProp name="HTTPSampler.path">/hub/launch</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="operator" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">541</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">operator</stringProp>
              </elementProp>
              <elementProp name="game" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${p_sgGameId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">game</stringProp>
              </elementProp>
              <elementProp name="playmode" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">real</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">playmode</stringProp>
              </elementProp>
              <elementProp name="player" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${c_playerId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">player</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${c_playerBearerToken}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">session</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer J7bt1Sd5fvHXZ3aR0hRi31DelJzeiwhH0NLdfeff</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

// Collect IDs for objects with type &quot;creditCard&quot;
def creditCardIds = response.data.findAll { it.attributes.type == &quot;creditCard&quot; &amp;&amp; it.attributes.isValid == true }*.id

// Select the 2nd ID (index 1 since Groovy lists are 0-based)
vars.put(&quot;c_paymentMethodId&quot;, creditCardIds.size() &gt; 0 ? creditCardIds[0] : null);

//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; PAYMENT METHOD ID: &quot; + vars.get(&quot;c_paymentMethodId&quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Try IWG Games: GET /hub/launch - SGCH" enabled="true">
          <stringProp name="HTTPSampler.domain">${p_baseSGCHUrl}</stringProp>
          <stringProp name="HTTPSampler.path">/hub/launch</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="operator" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">541</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">operator</stringProp>
              </elementProp>
              <elementProp name="game" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${p_iwgGameId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">game</stringProp>
              </elementProp>
              <elementProp name="playmode" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">demo</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">playmode</stringProp>
              </elementProp>
              <elementProp name="player" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${c_playerId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">player</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${c_playerBearerToken}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">session</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer J7bt1Sd5fvHXZ3aR0hRi31DelJzeiwhH0NLdfeff</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

// Collect IDs for objects with type &quot;creditCard&quot;
def creditCardIds = response.data.findAll { it.attributes.type == &quot;creditCard&quot; &amp;&amp; it.attributes.isValid == true }*.id

// Select the 2nd ID (index 1 since Groovy lists are 0-based)
vars.put(&quot;c_paymentMethodId&quot;, creditCardIds.size() &gt; 0 ? creditCardIds[0] : null);

//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; PAYMENT METHOD ID: &quot; + vars.get(&quot;c_paymentMethodId&quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="c_text" enabled="false">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">c_text</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">&lt;title&gt;</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">&lt;/title&gt;</stringProp>
            <stringProp name="BoundaryExtractor.default"></stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Buy IWG Games: GET /hub/launch - SGCH" enabled="true">
          <stringProp name="HTTPSampler.domain">${p_baseSGCHUrl}</stringProp>
          <stringProp name="HTTPSampler.path">/hub/launch</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="operator" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">541</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">operator</stringProp>
              </elementProp>
              <elementProp name="game" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${p_iwgGameId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">game</stringProp>
              </elementProp>
              <elementProp name="playmode" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">real</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">playmode</stringProp>
              </elementProp>
              <elementProp name="player" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${c_playerId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">player</stringProp>
              </elementProp>
              <elementProp name="session" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${c_playerBearerToken}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">session</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${c_playerBearerToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header settings" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer J7bt1Sd5fvHXZ3aR0hRi31DelJzeiwhH0NLdfeff</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Request check" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

//checking if the login has been successful. If not, stopping other operations and closing threads
if (!prev.isSuccessful()) {
     prev.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
//     log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + &quot;${playerLogin}&quot; + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);
	//log.info(&quot;LOGIN FAILED, PLAYER ID: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + &quot;${__threadNum}&quot;);

} else {


//parsing response and submitting necessary fields into JMeter variables
def response = new JsonSlurper().parseText(prev.getResponseDataAsString());

// Collect IDs for objects with type &quot;creditCard&quot;
def creditCardIds = response.data.findAll { it.attributes.type == &quot;creditCard&quot; &amp;&amp; it.attributes.isValid == true }*.id

// Select the 2nd ID (index 1 since Groovy lists are 0-based)
vars.put(&quot;c_paymentMethodId&quot;, creditCardIds.size() &gt; 0 ? creditCardIds[0] : null);

//throwing info into logs for debugging
//log.info(&quot;LOGIN SUCCESSFUL! PLAYER NAME: &quot; + &quot;${p_playerLogin}&quot; + &quot; PAYMENT METHOD ID: &quot; + vars.get(&quot;c_paymentMethodId&quot;));
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer;

String path=FileServer.getFileServer().getBaseDir();

f = new FileOutputStream(&quot;C://SGI_Performance//sg_perf_test//data//player_data_result_iko.csv&quot;,true);
p = new PrintStream(f); 

iteration = vars.getIteration();
p_playerLogin = vars.get(&quot;p_playerLogin&quot;); 
//c_walletType = vars.get(&quot;c_walletType&quot;);
c_playerId = vars.get(&quot;c_playerId&quot;);
p_iwgGameId = vars.get(&quot;p_iwgGameId&quot;);
p_sgGameId = vars.get(&quot;p_sgGameId&quot;);
//c_wagerId = vars.get(&quot;c_wagerId&quot;);
threadnum = ${__threadNum};
datetime = &quot;${__time(yyyy_MM_dd_HH_mm_ss)}&quot;;

this.interpreter.setOut(p); 
//p.println(p_playerLogin+ &quot;,&quot; +c_walletType+ &quot;,&quot; +c_walletBalance+ &quot;,&quot;+threadnum+ &quot;,&quot; +iteration);
p.println(&quot;Player Login: &quot; +p_playerLogin+ &quot;, Player ID: &quot; +c_playerId+ &quot;, IWG Game ID: &quot; +p_iwgGameId+ &quot;, SG Game ID: &quot; +p_sgGameId+ &quot;, Thread Number: &quot;+threadnum+ &quot;, Iteration Number: &quot; +iteration+&quot;, Time: &quot;+datetime);

f.close();
//log.info(&quot;LOGIN FAILED, PLAYER: &quot; + vars.get(&quot;p_playerLogin&quot;) + &quot;, STOPPING THE THREAD #&quot; + ${__threadNum}+ &quot;, Iteration: &quot; +iteration);
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <doubleProp>
            <name>throughput</name>
            <value>600.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
        </ConstantThroughputTimer>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
